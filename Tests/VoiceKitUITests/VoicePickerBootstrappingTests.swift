//
//  VoicePickerBootstrappingTests.swift
//  VoiceKit
//
//  Created by robert on 9/14/25.
//


//
//  VoicePickerBootstrappingTests.swift
//  VoiceKitUITests
//
//  Generated by GPT-5 (OpenAI) â€” collaborator: rdoggett
//  date: 09-14-2025
//

import XCTest
import VoiceKitCore
import VoiceKitUI

@MainActor
final class VoicePickerBootstrappingTests: XCTestCase {

    @MainActor
    final class FakeTTS: TTSConfigurable {
        var voices: [TTSVoiceInfo] = []
        var profiles: [String: TTSVoiceProfile] = [:]
        var defaultProfile: TTSVoiceProfile?
        var master: TTSMasterControl = .init()
        func availableVoices() -> [TTSVoiceInfo] { voices }
        func setVoiceProfile(_ profile: TTSVoiceProfile) { profiles[profile.id] = profile }
        func getVoiceProfile(id: String) -> TTSVoiceProfile? { profiles[id] }
        func setDefaultVoiceProfile(_ profile: TTSVoiceProfile) { defaultProfile = profile }
        func getDefaultVoiceProfile() -> TTSVoiceProfile? { defaultProfile }
        func setMasterControl(_ master: TTSMasterControl) { self.master = master }
        func getMasterControl() -> TTSMasterControl { master }
        func speak(_ text: String, using voiceID: String?) async {}
        func stopSpeakingNow() {}
    }

    private func currentLangPrefix() -> String {
        let tag = Locale.preferredLanguages.first ?? Locale.current.identifier
        return tag.split(separator: "-").first.map(String.init)?.lowercased() ?? "en"
    }

    func testBootstrapSetsDefaultToFirstFilteredVoice() {
        let lang = currentLangPrefix()
        let tts = FakeTTS()
        tts.voices = [
            TTSVoiceInfo(id: "vA", name: "Alpha", language: "\(lang)-US"),
            TTSVoiceInfo(id: "vB", name: "Beta", language: "\(lang)-GB")
        ]
        let store = VoiceProfilesStore(filename: "boot-\(UUID().uuidString).json")
        let vm = VoicePickerViewModel(tts: tts, store: store)

        XCTAssertEqual(vm.voices.count, 2)
        XCTAssertNotNil(store.defaultVoiceID)
        XCTAssertEqual(store.defaultVoiceID, vm.filteredVoices.first?.id)
    }

    func testCurrentLanguageDisplayNameIsNonEmptyHumanReadable() {
        let tts = FakeTTS()
        let store = VoiceProfilesStore(filename: "boot2-\(UUID().uuidString).json")
        let vm = VoicePickerViewModel(tts: tts, store: store)

        XCTAssertFalse(vm.currentLanguageDisplayName.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty)
    }

    func testSamplePhraseFallsBackToAlexWhenNameEmpty() {
        let tts = FakeTTS()
        let store = VoiceProfilesStore(filename: "boot3-\(UUID().uuidString).json")
        let vm = VoicePickerViewModel(tts: tts, store: store)

        let nameless = TTSVoiceProfile(id: "v", displayName: "", rate: 0.5, pitch: 1.0, volume: 1.0)
        let phrase = vm.samplePhrase(for: nameless)
        XCTAssertTrue(phrase.contains("My name is Alex"), "Expected fallback name 'Alex' in sample phrase")
    }
}