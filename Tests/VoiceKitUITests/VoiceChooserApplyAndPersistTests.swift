//
//  VoiceChooserApplyAndPersistTests.swift
//  VoiceKit
//
//  Generated by GPT-5 (OpenAI) â€” collaborator: rdoggett
//  date: 09-17-2025
//
//  Updates for current API:
//  - TTSVoiceProfile: rate is Double, pitch/volume are Float.
//  - Unwrap optionals from dictionary lookup before numeric comparisons.
//

import XCTest
@testable import VoiceKitUI
@testable import VoiceKit

@MainActor
final class VoiceChooserApplyAndPersistTests: XCTestCase {

    func testApplyUpdatesTTSAndPersists() throws {
        let filename = "picker_apply_persist.json"
        let store = VoiceProfilesStore(filename: filename)
        defer { cleanup(filename) }

        let tts = RealVoiceIO()
        let vm = VoiceChooserViewModel(tts: tts, store: store)

        // Create a profile and apply
        let id = "com.apple.speech.synthesis.voice.Alex"
        var profile = TTSVoiceProfile(id: id, rate: 0.52, pitch: 1.0, volume: 0.9)

        // Update some values; pitch/volume are Float, rate is Double
        profile.rate = 0.61
        profile.pitch = Float(1.15)
        profile.volume = Float(0.95)

        vm.updateProfile(profile)

        // Persist and reload
        store.save()
        let loaded = VoiceProfilesStore(filename: filename)

        // Unwrap the optional profile before comparing numbers
        guard let lp = loaded.profilesByID[id] else {
            return XCTFail("Loaded store missing profile for id \(id)")
        }
        XCTAssertEqual(lp.rate, 0.61, accuracy: 0.0001)
        XCTAssertEqual(lp.pitch, 1.15, accuracy: 0.0001)
        XCTAssertEqual(lp.volume, 0.95, accuracy: 0.0001)
    }

    func testSetDefaultAndMaster() throws {
        let filename = "picker_default_master.json"
        let store = VoiceProfilesStore(filename: filename)
        defer { cleanup(filename) }

        let tts = RealVoiceIO()
        let vm = VoiceChooserViewModel(tts: tts, store: store)

        let id = "com.apple.speech.synthesis.voice.Alex"
        store.setProfile(TTSVoiceProfile(id: id, rate: 0.5, pitch: 1.0, volume: 1.0))
        vm.setDefaultVoice(id: id)

        // Update tuning; order: rateVariation, pitchVariation, volume
        let newTuning = Tuning(rateVariation: 0.015, pitchVariation: 0.02, volume: 1.1)
        vm.updateTuning(newTuning)

        store.save()
        let loaded = VoiceProfilesStore(filename: filename)
        XCTAssertEqual(loaded.defaultVoiceID, id)
        XCTAssertEqual(loaded.master.rateVariation, 0.015, accuracy: 0.0001)
        XCTAssertEqual(loaded.master.pitchVariation, 0.02, accuracy: 0.0001)
        XCTAssertEqual(loaded.master.volume, 1.1, accuracy: 0.0001)
    }

    // MARK: - Helpers

    private func cleanup(_ filename: String) {
        let appSupport = FileManager.default.urls(for: .applicationSupportDirectory, in: .userDomainMask).first
            ?? FileManager.default.temporaryDirectory
        let url = appSupport.appendingPathComponent("VoiceIO", isDirectory: true).appendingPathComponent(filename)
        try? FileManager.default.removeItem(at: url)
    }
}
