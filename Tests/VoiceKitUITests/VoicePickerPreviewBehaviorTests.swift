//
//  VoicePickerPreviewBehaviorTests.swift
//  VoiceKitUITests
//
//  Generated by GPT-5 (OpenAI) â€” collaborator: rdoggett
//  date: 09-14-2025
//

import XCTest
import VoiceKitCore
import VoiceKitUI

@MainActor
final class VoicePickerPreviewBehaviorTests: XCTestCase {

    // Minimal fake TTS engine that records calls
    @MainActor
    final class FakeTTS: TTSConfigurable {
        var voices: [TTSVoiceInfo] = []
        var lastSpeakText: String?
        var lastSpeakVoiceID: String?
        var stopSpeakingCount = 0
        var profiles: [String: TTSVoiceProfile] = [:]
        var defaultProfile: TTSVoiceProfile?
        var master: TTSMasterControl = .init()

        func availableVoices() -> [TTSVoiceInfo] { voices }
        func setVoiceProfile(_ profile: TTSVoiceProfile) { profiles[profile.id] = profile }
        func getVoiceProfile(id: String) -> TTSVoiceProfile? { profiles[id] }
        func setDefaultVoiceProfile(_ profile: TTSVoiceProfile) { defaultProfile = profile }
        func getDefaultVoiceProfile() -> TTSVoiceProfile? { defaultProfile }
        func setMasterControl(_ master: TTSMasterControl) { self.master = master }
        func getMasterControl() -> TTSMasterControl { master }
        func speak(_ text: String, using voiceID: String?) async { lastSpeakText = text; lastSpeakVoiceID = voiceID }
        func stopSpeakingNow() { stopSpeakingCount += 1 }
    }

    private func currentLanguagePrefix() -> String {
        let preferred = Locale.preferredLanguages.first ?? Locale.current.identifier
        return preferred.split(separator: "-").first.map(String.init)?.lowercased() ?? "en"
    }

    // Small async polling helper to wait for a condition without flakiness.
    private func waitFor(_ what: String, timeout: TimeInterval = 1.0, poll: TimeInterval = 0.02, until condition: @escaping () -> Bool) async {
        let deadline = Date().addingTimeInterval(timeout)
        while Date() < deadline {
            if condition() { return }
            try? await Task.sleep(nanoseconds: UInt64(poll * 1_000_000_000))
        }
        XCTFail("Timed out waiting for \(what)")
    }

    func testFavoriteVoiceUsedForPreview() async {
        let lang = currentLanguagePrefix()
        let tts = FakeTTS()
        tts.voices = [
            TTSVoiceInfo(id: "v1", name: "Alpha", language: "\(lang)-US"),
            TTSVoiceInfo(id: "v2", name: "Beta", language: "\(lang)-US")
        ]
        let store = VoiceProfilesStore(filename: "preview-\(UUID().uuidString).json")
        let vm = VoicePickerViewModel(tts: tts, store: store)

        vm.setDefaultVoice(id: "v2")
        vm.updateMaster(TTSMasterControl(volume: 1.1, pitchVariation: 0, rateVariation: 0),
                        previewKind: "at volume 1.10")

        await waitFor("debounced preview speak") {
            tts.lastSpeakVoiceID == "v2" && (tts.lastSpeakText?.contains("at volume 1.10") == true)
        }
        XCTAssertEqual(tts.lastSpeakVoiceID, "v2")
        XCTAssertTrue(tts.lastSpeakText?.contains("at volume 1.10") == true)
    }

    func testPlayPreviewCancelsPrevious() async {
        let lang = currentLanguagePrefix()
        let tts = FakeTTS()
        tts.voices = [ TTSVoiceInfo(id: "v1", name: "Alpha", language: "\(lang)-US") ]
        let store = VoiceProfilesStore(filename: "preview2-\(UUID().uuidString).json")
        let vm = VoicePickerViewModel(tts: tts, store: store)

        vm.playPreview(phrase: "One", voiceID: "v1")
        await waitFor("first speak") { tts.lastSpeakText == "One" }

        vm.playPreview(phrase: "Two", voiceID: "v1")
        await waitFor("second speak") { tts.lastSpeakText == "Two" }

        // Each playPreview issues a stop + new speak
        XCTAssertEqual(tts.stopSpeakingCount, 2)
        XCTAssertEqual(tts.lastSpeakText, "Two")
    }

    func testDebounceTakesLastUpdate() async {
        let lang = currentLanguagePrefix()
        let tts = FakeTTS()
        tts.voices = [ TTSVoiceInfo(id: "v1", name: "Alpha", language: "\(lang)-US") ]
        let store = VoiceProfilesStore(filename: "preview3-\(UUID().uuidString).json")
        let vm = VoicePickerViewModel(tts: tts, store: store)

        vm.updateMaster(TTSMasterControl(volume: 1.0, pitchVariation: 0, rateVariation: 0), previewKind: "first")
        vm.updateMaster(TTSMasterControl(volume: 1.2, pitchVariation: 0, rateVariation: 0), previewKind: "second")

        await waitFor("debounced last preview") { tts.lastSpeakText?.contains("second") == true }
        XCTAssertTrue(tts.lastSpeakText?.contains("second") == true)
    }
}
