//
//  VoiceChooserViewModelExtrasTests.swift
//  VoiceKit
//
//  Generated by GPT-5 (OpenAI) â€” collaborator: rdoggett
//  date: 09-17-2025
//

import XCTest
import AVFoundation
@testable import VoiceKitUI
@testable import VoiceKit

@MainActor
final class VoiceChooserViewModelExtrasTests: XCTestCase {

    private func systemDisplayName(for id: String) -> String {
        AVSpeechSynthesisVoice(identifier: id)?.name ?? "Voice"
    }

    func testSamplePhraseUsesSystemNameWhenNoDisplayName() async throws {
        let store = VoiceProfilesStore(filename: "vm_extras_tests.json")
        defer { cleanup("vm_extras_tests.json") }

        let io = RealVoiceIO()
        // Allow system voice queries just for this test (and pass explicit allow).
        await VoiceKitTestMode.setAllowSystemVoiceQueries(true)
        defer { Task { await VoiceKitTestMode.setAllowSystemVoiceQueries(false) } }
        let vm = VoiceChooserViewModel(tts: io, store: store, allowSystemVoices: true)

        // Use a known identifier; avoid enumerating voices to reduce XPC/SQLite logs in tests.
        // If not present on this runtime, systemDisplayName will fall back to "Voice".
        let voiceID = "com.apple.speech.synthesis.voice.Alex"

        let profile = TTSVoiceProfile(id: voiceID, rate: 0.55, pitch: 1.0, volume: 1.0)
        let phrase = vm.samplePhrase(for: profile)
        XCTAssertTrue(phrase.contains(systemDisplayName(for: voiceID)))
    }

    // MARK: - Helpers

    private func cleanup(_ filename: String) {
        let appSupport = FileManager.default.urls(for: .applicationSupportDirectory, in: .userDomainMask).first
            ?? FileManager.default.temporaryDirectory
        let url = appSupport.appendingPathComponent("VoiceIO", isDirectory: true).appendingPathComponent(filename)
        try? FileManager.default.removeItem(at: url)
    }
}
