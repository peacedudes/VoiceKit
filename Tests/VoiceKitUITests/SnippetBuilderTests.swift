import XCTest
@testable import VoiceKitUI
import VoiceKit

final class SnippetBuilderTests: XCTestCase {
    func testMakeChorusSnippetFormatsHeaderBodyAndUsage() {
        // Arrange: two profiles with stable values.
        let id1 = "com.apple.eloquence.en-GB.Eddy"
        let id2 = "com.apple.speech.synthesis.voice.Cellos"
        let p1 = TTSVoiceProfile(id: id1,
                                 rate: 0.55, pitch: 0.95, volume: 1.0)
        let p2 = TTSVoiceProfile(id: id2,
                                 rate: 0.55, pitch: 1.05, volume: 1.0)
        let profiles = [p1, p2]

        // Act
        let snippet = makeChorusSnippet(for: profiles)

        // Assert: header and import
        XCTAssertTrue(snippet.hasPrefix("// VoiceKit chorus setup (generated by Chorus Lab)\nimport VoiceKit\n"),
                      "Snippet should start with header and import.")

        // Assert: opening of array
        XCTAssertTrue(snippet.contains("\nlet chorusProfiles = [\n"),
                      "Snippet should declare chorusProfiles array.")

        // Assert: contains both IDs, and in order
        guard let r1 = snippet.range(of: id1) else {
            XCTFail("Snippet should contain first profile id"); return
        }
        guard let r2 = snippet.range(of: id2) else {
            XCTFail("Snippet should contain second profile id"); return
        }
        XCTAssertLessThan(r1.lowerBound, r2.lowerBound,
                          "First profile should appear before second in the snippet.")

        // Assert: closes the array
        XCTAssertTrue(snippet.contains("\n]"),
                      "Snippet should close the array with ']' on its own line.")

        // Assert: contains the usage hint line
        XCTAssertTrue(snippet.contains(#"// Use with VoiceChorus: await VoiceChorus().sing("Your phrase", withVoiceProfiles: chorusProfiles)"#),
                      "Snippet should include usage hint.")
    }

    func testMakeChorusSnippetEmptyProfiles() {
        let snippet = makeChorusSnippet(for: [])
        XCTAssertEqual(snippet, "")
    }
}
