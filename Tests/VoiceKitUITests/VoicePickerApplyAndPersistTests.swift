//
//  VoicePickerApplyAndPersistTests.swift
//  VoiceKitUITests
//
//  Generated by GPT-5 (OpenAI) â€” collaborator: rdoggett
//  date: 09-14-2025
//

import XCTest
import VoiceKitCore
import VoiceKitUI

@MainActor
final class VoicePickerApplyAndPersistTests: XCTestCase {

    @MainActor
    final class FakeTTS: TTSConfigurable {
        var voices: [TTSVoiceInfo] = []
        var profiles: [String: TTSVoiceProfile] = [:]
        var defaultProfile: TTSVoiceProfile?
        var master: TTSMasterControl = .init()
        var setVoiceProfileCalls: [String] = []
        var setDefaultProfileCalls: [String] = []

        func availableVoices() -> [TTSVoiceInfo] { voices }
        func setVoiceProfile(_ profile: TTSVoiceProfile) { profiles[profile.id] = profile; setVoiceProfileCalls.append(profile.id) }
        func getVoiceProfile(id: String) -> TTSVoiceProfile? { profiles[id] }
        func setDefaultVoiceProfile(_ profile: TTSVoiceProfile) { defaultProfile = profile; setDefaultProfileCalls.append(profile.id) }
        func getDefaultVoiceProfile() -> TTSVoiceProfile? { defaultProfile }
        func setMasterControl(_ master: TTSMasterControl) { self.master = master }
        func getMasterControl() -> TTSMasterControl { master }
        func speak(_ text: String, using voiceID: String?) async {}
        func stopSpeakingNow() {}
    }

    private func currentLangPrefix() -> String {
        let tag = Locale.preferredLanguages.first ?? Locale.current.identifier
        return tag.split(separator: "-").first.map(String.init)?.lowercased() ?? "en"
    }

    func testUpdateProfilePersistsAndAppliesToDefault() {
        let lang = currentLangPrefix()
        let tts = FakeTTS()
        tts.voices = [ TTSVoiceInfo(id: "voice1", name: "Alpha", language: "\(lang)-US") ]

        let store = VoiceProfilesStore(filename: "apply-\(UUID().uuidString).json")
        let vm = VoicePickerViewModel(tts: tts, store: store)

        vm.setDefaultVoice(id: "voice1")
        var updated = store.profile(for: tts.voices[0])
        updated.rate = 0.77
        vm.updateProfile(updated)

        guard let stored = store.profilesByID["voice1"] else {
            return XCTFail("Missing stored profile for voice1")
        }
        XCTAssertEqual(stored.rate, 0.77 as Float, accuracy: 0.0001 as Float)

        guard let applied = tts.defaultProfile else {
            return XCTFail("Missing default profile applied to TTS")
        }
        XCTAssertEqual(applied.rate, 0.77 as Float, accuracy: 0.0001 as Float)
        XCTAssertTrue(tts.setDefaultProfileCalls.contains("voice1"))
    }

    func testUpdateProfileAppliesToNonDefaultViaSetVoiceProfile() {
        let lang = currentLangPrefix()
        let tts = FakeTTS()
        tts.voices = [
            TTSVoiceInfo(id: "voice1", name: "Alpha", language: "\(lang)-US"),
            TTSVoiceInfo(id: "voice2", name: "Beta",  language: "\(lang)-US")
        ]
        let store = VoiceProfilesStore(filename: "apply2-\(UUID().uuidString).json")
        let vm = VoicePickerViewModel(tts: tts, store: store)

        vm.setDefaultVoice(id: "voice1")
        var nonDefaultProfile = store.profile(for: tts.voices[1])
        nonDefaultProfile.pitch = 1.33
        vm.updateProfile(nonDefaultProfile)

        guard let stored = store.profilesByID["voice2"] else {
            return XCTFail("Missing stored profile for voice2")
        }
        XCTAssertEqual(stored.pitch, 1.33 as Float, accuracy: 0.0001 as Float)
        XCTAssertTrue(tts.setVoiceProfileCalls.contains("voice2"))
    }
}
