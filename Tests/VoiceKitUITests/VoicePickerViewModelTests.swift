//
//  VoicePickerViewModelTests.swift
//  VoiceKit
//
//  Generated by GPT-5 (OpenAI) â€” collaborator: rdoggett
//  date: 09-17-2025
//
//  Updates for current API:
//  - TTSVoiceProfile has no displayName; use system name helpers if needed.
//  - TTSVoiceProfile.rate is Double; pitch/volume are Float.
//  - TTSMasterControl initializer order: rateVariation, pitchVariation, volume.
//  - Add explicit type annotations where inference became ambiguous.
//

import XCTest
import AVFoundation
@testable import VoiceKitUI
@testable import VoiceKitCore

@MainActor
final class VoicePickerViewModelTests: XCTestCase {

    private func systemName(for id: String) -> String {
        AVSpeechSynthesisVoice(identifier: id)?.name ?? "Voice"
    }

    func testFilteringByLanguage() throws {
        let filename = "vm_lang_filter.json"
        let store = VoiceProfilesStore(filename: filename)
        defer { cleanup(filename) }

        let tts = RealVoiceIO()
        let vm = VoicePickerViewModel(tts: tts, store: store)

        vm.refreshAvailableVoices()
        // Explicit type annotation to avoid inference ambiguity
        let all: [TTSVoiceInfo] = vm.voices
        XCTAssertNotNil(all)

        vm.languageFilter = .all
        let filteredAll: [TTSVoiceInfo] = vm.filteredVoices
        XCTAssertLessThanOrEqual(filteredAll.count, all.count)

        vm.languageFilter = .current
        let filteredCurrent: [TTSVoiceInfo] = vm.filteredVoices
        // Not asserting specific counts; just ensure call works and returns a subset or equal
        XCTAssertLessThanOrEqual(filteredCurrent.count, all.count)
    }

    func testPreviewPlaysWithUpdatedMaster() async throws {
        let filename = "vm_preview_master.json"
        let store = VoiceProfilesStore(filename: filename)
        defer { cleanup(filename) }

        let tts = RealVoiceIO()
        let vm = VoicePickerViewModel(tts: tts, store: store)

        vm.refreshAvailableVoices()

        // Choose a voice id for preview (system or synthetic)
        let voiceID = AVSpeechSynthesisVoice.speechVoices().first?.identifier ?? "com.apple.speech.synthesis.voice.Alex"

        // Ensure a profile exists
        let profile = TTSVoiceProfile(id: voiceID, rate: 0.55, pitch: 1.0, volume: 1.0)
        store.setProfile(profile)
        vm.applyToTTS()

        // Update master with correct parameter order
        let master = TTSMasterControl(rateVariation: 0.02, pitchVariation: 0.01, volume: 1.05)
        vm.updateMaster(master, previewKind: "test")

        // Trigger a preview phrase
        let phrase: String = vm.samplePhrase(for: profile, suffix: "preview")
        vm.playPreview(phrase: phrase, voiceID: voiceID)

        // Give a short moment for any async preview Task to spin up, then stop
        try? await Task.sleep(nanoseconds: 50_000_000)
        vm.stopPreview()
    }

    func testHiddenToggleAffectsFilteredVoices() throws {
        let filename = "vm_hidden_filter.json"
        let store = VoiceProfilesStore(filename: filename)
        defer { cleanup(filename) }

        let tts = RealVoiceIO()
        var vm = VoicePickerViewModel(tts: tts, store: store)
        vm.refreshAvailableVoices()

        // Fallback for environments without system voices (e.g., some simulators)
        if vm.voices.isEmpty {
            @MainActor
            final class LocalFakeTTS: TTSConfigurable, VoiceListProvider {
                var voices: [TTSVoiceInfo] = []
                var profiles: [String: TTSVoiceProfile] = [:]
                var defaultProfile: TTSVoiceProfile?
                var master: TTSMasterControl = .init()
                nonisolated func availableVoices() -> [TTSVoiceInfo] { MainActor.assumeIsolated { voices } }
                func setVoiceProfile(_ profile: TTSVoiceProfile) { profiles[profile.id] = profile }
                func getVoiceProfile(id: String) -> TTSVoiceProfile? { profiles[id] }
                func setDefaultVoiceProfile(_ profile: TTSVoiceProfile) { defaultProfile = profile }
                func getDefaultVoiceProfile() -> TTSVoiceProfile? { defaultProfile }
                func setMasterControl(_ master: TTSMasterControl) { self.master = master }
                func getMasterControl() -> TTSMasterControl { master }
                func speak(_ text: String, using voiceID: String?) async {}
                func stopSpeakingNow() {}
            }
            let fake = LocalFakeTTS()
            fake.voices = [
                TTSVoiceInfo(id: "vs", name: "System Soprano", language: "en-US"),
                TTSVoiceInfo(id: "vh", name: "System Hero", language: "en-GB"),
            ]
            vm = VoicePickerViewModel(tts: fake, store: store, allowSystemVoices: false)
            vm.refreshAvailableVoices()
        }

        guard let first = vm.voices.first else {
            // Skip only on CI; fail locally so we notice missing system voices.
            let env = ProcessInfo.processInfo.environment
            let isCI = env["CI"] == "true"
                || env["GITHUB_ACTIONS"] == "true"
                || env["BUILDKITE"] != nil
                || env["JENKINS_URL"] != nil
                || env["TRAVIS"] == "true"
                || env["TEAMCITY_VERSION"] != nil
                || env["CIRCLECI"] == "true"
                || env["XCODE_CLOUD_BUILD_ID"] != nil
                || env["TF_BUILD"] == "True"
                || env["BUDDY"] == "true"
            if isCI { throw XCTSkip("No system voices available (CI)") }
            XCTFail("Expected system voices on this device/simulator")
            return
        }

        // Ensure profile exists
        _ = store.profile(for: first)

        vm.languageFilter = .all
        vm.showHidden = false

        let before: [TTSVoiceInfo] = vm.filteredVoices
        store.setHidden(first.id, true)
        // Recompute filtered after hiding
        let afterHide: [TTSVoiceInfo] = vm.filteredVoices

        // When not showing hidden voices, count should drop or stay same if multiple with same filter
        XCTAssertLessThanOrEqual(afterHide.count, before.count)

        // When showing hidden, count should be back to baseline
        vm.showHidden = true
        let afterShow: [TTSVoiceInfo] = vm.filteredVoices
        XCTAssertGreaterThanOrEqual(afterShow.count, afterHide.count)
    }

    // MARK: - Helpers

    private func cleanup(_ filename: String) {
        let appSupport = FileManager.default.urls(for: .applicationSupportDirectory, in: .userDomainMask).first
            ?? FileManager.default.temporaryDirectory
        let url = appSupport.appendingPathComponent("VoiceIO", isDirectory: true).appendingPathComponent(filename)
        try? FileManager.default.removeItem(at: url)
    }
}
