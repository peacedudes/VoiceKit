//
//  VoicePickerViewModelTests.swift
//  VoiceKitUITests
//
//  Generated by GPT-5 (OpenAI) â€” collaborator: rdoggett
//  date: 09-13-2025
//

import XCTest
import VoiceKitCore
import VoiceKitUI

@MainActor
final class VoicePickerViewModelTests: XCTestCase {

    // Fake TTS engine conforming to TTSConfigurable
    @MainActor
    final class FakeTTS: TTSConfigurable {
        var voices: [TTSVoiceInfo] = []
        var profiles: [String: TTSVoiceProfile] = [:]
        var defaultProfile: TTSVoiceProfile?
        var master: TTSMasterControl = .init()

        var lastSpeakText: String?
        var lastSpeakVoiceID: String?
        var setDefaultCalls: [String] = []
        var setProfileCalls: [String] = []
        var setMasterCalls = 0
        var stopSpeakingCount = 0

        func availableVoices() -> [TTSVoiceInfo] { voices }
        func setVoiceProfile(_ profile: TTSVoiceProfile) { profiles[profile.id] = profile; setProfileCalls.append(profile.id) }
        func getVoiceProfile(id: String) -> TTSVoiceProfile? { profiles[id] }
        func setDefaultVoiceProfile(_ profile: TTSVoiceProfile) { defaultProfile = profile; setDefaultCalls.append(profile.id) }
        func getDefaultVoiceProfile() -> TTSVoiceProfile? { defaultProfile }
        func setMasterControl(_ master: TTSMasterControl) { self.master = master; setMasterCalls += 1 }
        func getMasterControl() -> TTSMasterControl { master }
        func speak(_ text: String, using voiceID: String?) async {
            lastSpeakText = text
            lastSpeakVoiceID = voiceID
        }
        func stopSpeakingNow() { stopSpeakingCount += 1 }
    }

    private func currentLang() -> String {
        let tag = Locale.preferredLanguages.first ?? Locale.current.identifier
        let code = tag.split(separator: "-").first.map(String.init) ?? "en"
        return code.lowercased()
    }

    func testBootstrapAndApplyToTTS() async {
        let langPrefix = currentLang()
        let fake = FakeTTS()
        fake.voices = [
            TTSVoiceInfo(id: "v1", name: "Alpha", language: "\(langPrefix)-US"),
            TTSVoiceInfo(id: "v2", name: "Beta", language: "\(langPrefix)-GB")
        ]

        let store = VoiceProfilesStore(filename: "vm-\(UUID().uuidString).json")
        let vm = VoicePickerViewModel(tts: fake, store: store)

        // Should load voices and set up profiles
        XCTAssertEqual(vm.voices.count, 2)
        XCTAssertNotNil(store.defaultVoiceID)

        // One setMasterControl call happened during init via applyToTTS()
        XCTAssertEqual(fake.setMasterCalls, 1)

        // Apply changes to TTS again
        vm.applyToTTS()
        XCTAssertGreaterThan(fake.setProfileCalls.count, 0)
        XCTAssertEqual(fake.setMasterCalls, 2)

        if let defID = store.defaultVoiceID {
            XCTAssertTrue(fake.setDefaultCalls.contains(defID))
        }
    }

    func testUpdateProfileAndDefault() async {
        let langPrefix = currentLang()
        let fake = FakeTTS()
        fake.voices = [ TTSVoiceInfo(id: "v1", name: "Alpha", language: "\(langPrefix)-US") ]

        let store = VoiceProfilesStore(filename: "vm-\(UUID().uuidString).json")
        let vm = VoicePickerViewModel(tts: fake, store: store)

        // Make v1 default
        vm.setDefaultVoice(id: "v1")
        XCTAssertTrue(fake.setDefaultCalls.contains("v1"))

        // Change the profile; should call setDefaultVoiceProfile on fake for the default
        var p = store.profile(for: fake.voices[0])
        p.rate = 0.66
        vm.updateProfile(p)

        guard let rate: Float = fake.defaultProfile?.rate else {
            return XCTFail("Missing default profile after update")
        }
        XCTAssertEqual(rate, 0.66 as Float, accuracy: 0.0001 as Float)
    }

    func testUpdateMasterTriggersDebouncedPreviewSpeak() async {
        let langPrefix = currentLang()
        let fake = FakeTTS()
        fake.voices = [
            TTSVoiceInfo(id: "v1", name: "Alpha", language: "\(langPrefix)-US")
        ]

        let store = VoiceProfilesStore(filename: "vm-\(UUID().uuidString).json")
        let vm = VoicePickerViewModel(tts: fake, store: store)

        // Trigger master update with previewKind suffix text
        vm.updateMaster(TTSMasterControl(volume: 1.1, pitchVariation: 0.0, rateVariation: 0.0),
                        previewKind: "at volume 1.10")

        // Debounce is ~160ms; wait slightly longer
        try? await Task.sleep(nanoseconds: 250_000_000)
        XCTAssertNotNil(fake.lastSpeakText)
        XCTAssertTrue(fake.lastSpeakText?.contains("at volume 1.10") == true)
        XCTAssertEqual(fake.lastSpeakVoiceID, store.defaultVoiceID)
    }
}
