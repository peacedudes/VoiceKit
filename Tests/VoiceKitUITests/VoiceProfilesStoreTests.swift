//
//  VoiceProfilesStoreTests.swift
//  VoiceKit
//
//  Generated by GPT-5 (OpenAI) â€” collaborator: rdoggett
//  date: 09-17-2025
//

import XCTest
@testable import VoiceKitUI
@testable import VoiceKit

@MainActor
final class VoiceProfilesStoreTests: XCTestCase {

    func testSetAndGetProfile() throws {
        let filename = "test_store.json"
        let store = VoiceProfilesStore(filename: filename)
        defer { cleanup(filename) }

        let id = "com.apple.speech.synthesis.voice.Alex"
        let profile = TTSVoiceProfile(id: id, rate: 0.6, pitch: 1.1, volume: 0.9)
        store.setProfile(profile)
        store.save()

        let loaded = VoiceProfilesStore(filename: filename)
        guard let lp = loaded.profilesByID[id] else {
            XCTFail("Missing profile after load"); return
        }
        XCTAssertEqual(lp.rate, 0.6, accuracy: 0.0001)
        XCTAssertEqual(lp.pitch, 1.1, accuracy: 0.0001)
        XCTAssertEqual(lp.volume, 0.9, accuracy: 0.0001)
    }

    func testTuningPersists() throws {
        let filename = "test_master.json"
        let store = VoiceProfilesStore(filename: filename)
        defer { cleanup(filename) }

        // Note parameter order: rateVariation, pitchVariation, volume
        store.tuning = Tuning(rateVariation: 0.02, pitchVariation: 0.03, volume: 1.2)
        store.save()

        let loaded = VoiceProfilesStore(filename: filename)
        XCTAssertEqual(loaded.tuning.rateVariation, 0.02, accuracy: 0.0001)
        XCTAssertEqual(loaded.tuning.pitchVariation, 0.03, accuracy: 0.0001)
        XCTAssertEqual(loaded.tuning.volume, 1.2, accuracy: 0.0001)
    }

    func testFavoriteAndActiveFlags() throws {
        let filename = "test_flags.json"
        let store = VoiceProfilesStore(filename: filename)
        defer { cleanup(filename) }

        let id = "com.apple.speech.synthesis.voice.Alex"
        store.setProfile(TTSVoiceProfile(id: id, rate: 0.5, pitch: 1.0, volume: 1.0))

        store.defaultVoiceID = id
        store.toggleActive(id)
        XCTAssertTrue(store.isActive(id))

        store.save()
        let loaded = VoiceProfilesStore(filename: filename)
        XCTAssertEqual(loaded.defaultVoiceID, id)
        XCTAssertTrue(loaded.isActive(id))
    }

    // MARK: - Helpers

    private func cleanup(_ filename: String) {
        let appSupport = FileManager.default.urls(for: .applicationSupportDirectory, in: .userDomainMask).first
            ?? FileManager.default.temporaryDirectory
        let url = appSupport.appendingPathComponent("VoiceIO", isDirectory: true).appendingPathComponent(filename)
        try? FileManager.default.removeItem(at: url)
    }
}
