//
//  BoostedSchedulingSeamTests.swift
//  VoiceKitCoreTests
//
//  Generated by GPT-5 (OpenAI) â€” collaborator: rdoggett
//  date: 09-20-2025
//

import XCTest
@testable import VoiceKitCore
import AVFoundation

@MainActor
final class BoostedSchedulingSeamTests: XCTestCase {

    // A fake provider to observe scheduling without driving real audio
    final class FakeBoostedNodesProvider: BoostedNodesProvider {
        var engine: AVAudioEngine?
        var player: AVAudioPlayerNode?
        var eq: AVAudioUnitEQ?
        private(set) var resetCount = 0
        func reset() { resetCount += 1 }
        static func live() -> BoostedNodesProvider { FakeBoostedNodesProvider() }
    }

    func testClipTimeoutConfigIsRespected() async throws {
        var cfg = VoiceIOConfig()
        cfg.clipWaitTimeoutSeconds = 0.05

        let fake = FakeBoostedNodesProvider()
        let io = RealVoiceIO(
            config: cfg,
            speechDriver: LiveSpeechTaskDriver.live(),
            tapSource: LiveRecognitionTapSource.live(),
            boostedProvider: fake
        )
        XCTAssertEqual(io.config.clipWaitTimeoutSeconds, 0.05, accuracy: 0.0001)
    }

    func testResetCalledOnStopClip() async throws {
        let io = RealVoiceIO()
        let fake = FakeBoostedNodesProvider()
        _ = fake // silence unused

        // Add a waiter; it is immediately resumed by boostWaiters setter and not retained.
        try? await withCheckedThrowingContinuation { (cont: CheckedContinuation<Void, Error>) in
            var waiters = io.boostWaiters
            waiters.append(cont)
            io.boostWaiters = waiters
            // Do not assert on count; continuation is already resumed and not stored.
        }

        // Calling stopClip should be idempotent and leave no waiters.
        io.stopClip()
        XCTAssertTrue(io.boostWaiters.isEmpty)
        // A second call should also no-op.
        io.stopClip()
        XCTAssertTrue(io.boostWaiters.isEmpty)
    }
}
