//
//  RealVoiceIOBoostedTests.swift
//  VoiceKitCoreTests
//
//  Generated by GPT-5 (OpenAI) â€” collaborator: rdoggett
//  date: 09-17-2025
//

import XCTest
@testable import VoiceKitCore
import AVFoundation

@MainActor
final class RealVoiceIOBoostedTests: XCTestCase {

    func testWaitersResumeOnCompletion() async throws {
        let io = RealVoiceIO()

        XCTAssertTrue(io.boostWaiters.isEmpty)

        var resumedCount = 0
        for _ in 0..<2 {
            try await withCheckedThrowingContinuation { (cont: CheckedContinuation<Void, Error>) in
                var waiters = io.boostWaiters
                waiters.append(cont)
                io.boostWaiters = waiters
            }
        }
        XCTAssertEqual(io.boostWaiters.count, 2)

        let waiters = io.boostWaiters
        io.boostWaiters.removeAll()
        for w in waiters {
            w.resume()
            resumedCount += 1
        }

        XCTAssertTrue(io.boostWaiters.isEmpty)
        XCTAssertEqual(resumedCount, 2)
    }

    func testWaitersReceiveCancellationOnStop() async throws {
        let io = RealVoiceIO()

        try await withCheckedThrowingContinuation { (cont: CheckedContinuation<Void, Error>) in
            var waiters = io.boostWaiters
            waiters.append(cont)
            io.boostWaiters = waiters
        }
        XCTAssertEqual(io.boostWaiters.count, 1)

        // Use the new name
        io.stopClip()

        XCTAssertTrue(io.boostWaiters.isEmpty)
    }

    func testPlayClipTimeoutDoesNotLeakWaiters() async {
        let io = RealVoiceIO()

        try? await withCheckedThrowingContinuation { (cont: CheckedContinuation<Void, Error>) in
            var waiters = io.boostWaiters
            waiters.append(cont)
            io.boostWaiters = waiters
        }
        XCTAssertEqual(io.boostWaiters.count, 1)

        let waiters = io.boostWaiters
        io.boostWaiters.removeAll()
        for w in waiters {
            w.resume(throwing: SimpleError("Timed out"))
        }

        XCTAssertTrue(io.boostWaiters.isEmpty)
    }
}
