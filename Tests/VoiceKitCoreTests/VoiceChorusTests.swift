//
//  VoiceChorusTests.swift
//  VoiceKitCoreTests
//
//  Generated by GPT-5 (OpenAI) â€” collaborator: rdoggett
//  date: 09-16-2025
//

import XCTest
import VoiceKitCore
import CoreGraphics

@MainActor
final class VoiceChorusTests: XCTestCase {

    @MainActor
    final class MockEngine: VoiceIO, TTSConfigurable {
        var onListeningChanged: ((Bool) -> Void)?
        var onTranscriptChanged: ((String) -> Void)?
        var onLevelChanged: ((CGFloat) -> Void)?
        var onTTSSpeakingChanged: ((Bool) -> Void)?
        var onTTSPulse: ((CGFloat) -> Void)?
        var onStatusMessageChanged: ((String?) -> Void)?

        var log: [String] = []
        var stopped = false
        var speakDelay: UInt64 = 80_000_000 // Default 80ms delay for speaking

        // Track profiles to test custom voice configurations
        var appliedProfiles: [String: TTSVoiceProfile] = [:]

        func ensurePermissions() async throws {}
        func configureSessionIfNeeded() async throws {}

        func speak(_ text: String) async {
            log.append("speak:\(text):noID")
            try? await Task.sleep(nanoseconds: speakDelay)
        }

        // Track speak with ID or profile for test validation
        func speak(_ text: String, using voiceID: String?) async {
            log.append("speak:\(text):\(voiceID ?? "nil")")
            try? await Task.sleep(nanoseconds: speakDelay)
        }
        
        func setVoiceProfile(_ profile: TTSVoiceProfile) {
            appliedProfiles[profile.id] = profile
        }

        func availableVoices() -> [TTSVoiceInfo] { [] }
        func getVoiceProfile(id: String) -> TTSVoiceProfile? { nil }
        func setDefaultVoiceProfile(_ profile: TTSVoiceProfile) {}
        func getDefaultVoiceProfile() -> TTSVoiceProfile? { nil }
        func setMasterControl(_ control: TTSMasterControl) {}
        func getMasterControl() -> TTSMasterControl { .init() }
        func stopSpeakingNow() {}
        func prepareBoosted(url: URL, gainDB: Float) async throws {}
        func startPreparedBoosted() async throws {}
        func playBoosted(url: URL, gainDB: Float) async throws {}
        func listen(timeout: TimeInterval, inactivity: TimeInterval, record: Bool) async throws -> VoiceResult {
            VoiceResult(transcript: "", recordingURL: nil)
        }

        func stopAll() { stopped = true; log.append("stopAll") }
        func hardReset() {}
    }
/*
    func testChorusRunsEnginesInParallel() async {
        let chorus = VoiceChorus { MockEngine() }
        let start = Date()
        
        let voices = [
            SingableVoice(voiceID: "com.apple.voice.alex"),
            SingableVoice(profile: TTSVoiceProfile(id: "1", displayName: "Alex Custom", rate: 0.5, pitch: 1.2, volume: 1)),
            SingableVoice(voiceID: "com.apple.voice.emma")
        ]
        await chorus.sing("Hello, World!", with: voices)

        let elapsed = Date().timeIntervalSince(start)

        // Parallel engines should complete significantly faster than the sum of individual delays
        XCTAssertLessThan(elapsed, 0.22)
        print("Engines ran in parallel and completed in ~\(elapsed) seconds.")
    }

    func testStopCancelsParallelEngineTasks() async {
        let chorus = VoiceChorus { MockEngine() }
        let tasks = Task {
            await chorus.sing("Testing stop...", with: [
                SingableVoice(voiceID: "com.apple.voice.joe"),
                SingableVoice(voiceID: "com.apple.voice.susan")
            ])
        }
        
        // Allow some time for tasks to start
        try? await Task.sleep(nanoseconds: 20_000_000)

        chorus.stop()  // Should stop all ongoing speeches
        await tasks.value

        // We can't directly inspect the internal engine state, but test passes if no crash and `stopAll` was called
        XCTAssertTrue(true, "Chorus stopped without crashing.")
    }
 */
}
