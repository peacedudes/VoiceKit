//
//  NameMatchMoreTests.swift
//  VoiceKitCoreTests
//
//  Generated by GPT-5 (OpenAI) — collaborator: rdoggett
//  date: 09-13-2025
//

import XCTest
import VoiceKitCore

final class NameMatchMoreTests: XCTestCase {

    func testNormalizeRemovesInvisiblesAndUnifiesDashes() {
        // Insert zero-width space U+200B between letters; use en-dash/em-dash/minus variants
        let s = "Z\u{200B}e\u{200B}ro\u{200B} Width — En–Em − Minus"
        let norm = NameMatch.normalizeKey(s)
        // Expect invisibles gone, dash variants -> "-" and spacing collapsed
        XCTAssertEqual(norm, "zero width - en-em - minus")
    }

    func testNormalizeApostrophesAndCleanup() {
        XCTAssertEqual(NameMatch.normalizeKey("O’Connor"), "oconnor")
        XCTAssertEqual(NameMatch.normalizeKey("O'Connor"), "oconnor")
        XCTAssertEqual(NameMatch.normalizeKey("  -- hello --  "), "hello")
    }

    func testDistanceEmptyAndIdentity() {
        XCTAssertEqual(NameMatch.stringDistanceScore(a: "", b: ""), 0)
        XCTAssertEqual(NameMatch.stringDistanceScore(a: "a", b: "a"), 0)
        XCTAssertEqual(NameMatch.stringDistanceScore(a: "hello world", b: "hello world"), 0)
        XCTAssertEqual(NameMatch.stringDistanceScore(a: "a", b: ""), 1)
        XCTAssertEqual(NameMatch.stringDistanceScore(a: "", b: "b"), 1)
    }

    func testTokenPenaltyForMissingTokens() {
        let a = NameMatch.normalizeKey("john paul")
        let b = NameMatch.normalizeKey("john")
        let score = NameMatch.stringDistanceScore(a: a, b: b)
        XCTAssertGreaterThan(score, 0.05) // not zero because a token is missing
        XCTAssertLessThan(score, 0.7)     // but not maximal because first token matches well
    }

    func testCloseSpellingAndDifferentTokens() {
        let a = NameMatch.normalizeKey("kathryn")
        let b = NameMatch.normalizeKey("catherine")
        XCTAssertLessThan(NameMatch.stringDistanceScore(a: a, b: b), 0.5)

        let c = NameMatch.normalizeKey("bob dylan")
        let d = NameMatch.normalizeKey("alice cooper")
        XCTAssertGreaterThan(NameMatch.stringDistanceScore(a: c, b: d), 0.6)
    }
}
