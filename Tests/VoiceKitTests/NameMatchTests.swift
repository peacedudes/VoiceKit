//
//  NameMatchTests.swift
//  VoiceKit
//
//  Generated by GPT-5 (OpenAI) — collaborator: rdoggett
//  date: 09-12-2025
//

import XCTest
import VoiceKit

final class NameMatchTests: XCTestCase {

    func testNormalizeKeyHandlesDiacriticsLigaturesApostrophes() {
        // Zoë O’Connor → "zoe oconnor"
        let input = "Zoë O’Connor"
        let norm = NameMatch.normalizeKey(input)
        XCTAssertEqual(norm, "zoe oconnor")

        // Æthelred → "aethelred"
        XCTAssertEqual(NameMatch.normalizeKey("Æthelred"), "aethelred")

        // Mixed punctuation collapses and lowercases
        XCTAssertEqual(NameMatch.normalizeKey("  Jean‑Luc  Picard! "), "jean-luc picard")
    }

    func testStringDistanceScoreTokenAware() {
        // Close spellings should be < 0.35
        let aKey = NameMatch.normalizeKey("Katherine")
        let bKey = NameMatch.normalizeKey("Catherine")
        let score = NameMatch.stringDistanceScore(a: aKey, b: bKey)
        XCTAssertLessThan(score, 0.35)

        // Different names should be larger
        let cKey = NameMatch.normalizeKey("Bob")
        let dKey = NameMatch.normalizeKey("Alice")
        let score2 = NameMatch.stringDistanceScore(a: cKey, b: dKey)
        XCTAssertGreaterThan(score2, 0.35)
    }

    func testNormalizeRemovesInvisiblesAndUnifiesDashes() {
        // Insert zero-width space U+200B between letters; use en-dash/em-dash/minus variants
        let input = "Z\u{200B}e\u{200B}ro\u{200B} Width — En–Em − Minus"
        let norm = NameMatch.normalizeKey(input)
        // Expect invisibles gone, dash variants -> "-" and spacing collapsed
        XCTAssertEqual(norm, "zero width - en-em - minus")
    }

    func testNormalizeApostrophesAndCleanup() {
        XCTAssertEqual(NameMatch.normalizeKey("O’Connor"), "oconnor")
        XCTAssertEqual(NameMatch.normalizeKey("O'Connor"), "oconnor")
        XCTAssertEqual(NameMatch.normalizeKey("  -- hello --  "), "hello")
    }

    func testDistanceEmptyAndIdentity() {
        XCTAssertEqual(NameMatch.stringDistanceScore(a: "", b: ""), 0)
        XCTAssertEqual(NameMatch.stringDistanceScore(a: "a", b: "a"), 0)
        XCTAssertEqual(NameMatch.stringDistanceScore(a: "hello world", b: "hello world"), 0)
        XCTAssertEqual(NameMatch.stringDistanceScore(a: "a", b: ""), 1)
        XCTAssertEqual(NameMatch.stringDistanceScore(a: "", b: "b"), 1)
    }

    func testTokenPenaltyForMissingTokens() {
        let aKey = NameMatch.normalizeKey("john paul")
        let bKey = NameMatch.normalizeKey("john")
        let score = NameMatch.stringDistanceScore(a: aKey, b: bKey)
        XCTAssertGreaterThan(score, 0.05) // not zero because a token is missing
        XCTAssertLessThan(score, 0.7)     // but not maximal because first token matches well
    }

    func testCloseSpellingAndDifferentTokens() {
        let aKey = NameMatch.normalizeKey("kathryn")
        let bKey = NameMatch.normalizeKey("catherine")
        XCTAssertLessThan(NameMatch.stringDistanceScore(a: aKey, b: bKey), 0.5)

        let cKey = NameMatch.normalizeKey("bob dylan")
        let dKey = NameMatch.normalizeKey("alice cooper")
        XCTAssertGreaterThan(NameMatch.stringDistanceScore(a: cKey, b: dKey), 0.6)
    }

    // MARK: - Name Match Token Distance Tests

    func testIdenticalIsZero() {
        let key = NameMatch.normalizeKey("Jean-Luc Picard")
        XCTAssertEqual(NameMatch.stringDistanceScore(a: key, b: key), 0)
    }

    func testMissingTokenPenalizedButNotMax() {
        let aKey = NameMatch.normalizeKey("john paul jones")
        let bKey = NameMatch.normalizeKey("john jones")
        let score = NameMatch.stringDistanceScore(a: aKey, b: bKey)
        XCTAssertGreaterThan(score, 0.05)
        XCTAssertLessThan(score, 0.8)
    }


    func testCrossTokenMatchingPicksBestPairs() {
        let aKey = NameMatch.normalizeKey("katherine anne")
        let bKey = NameMatch.normalizeKey("catherine ann")
        let score = NameMatch.stringDistanceScore(a: aKey, b: bKey)
        XCTAssertLessThan(score, 0.35)
    }

    // MARK: - Name Match Unicode Edge Tests

    func testZeroWidthAndSoftHyphenAreRemoved() {
        let text = "Jo\u{200D}se\u{00AD}ph"
        XCTAssertEqual(NameMatch.normalizeKey(text), "joseph")
    }

    func testDashVariantsUnifyToAsciiHyphenAndSpacingCollapses() {
        // NameMatch.normalizeKey unifies dash variants to "-" and keeps hyphens.
        let text1 = "Jean–Luc — Picard − Captain"
        XCTAssertEqual(NameMatch.normalizeKey(text1), "jean-luc - picard - captain")

        let text2 = "Jean–Luc — Picard"
        XCTAssertEqual(NameMatch.normalizeKey(text2), "jean-luc - picard")
    }

    func testApostrophesRemovedAndLowercased() {
        XCTAssertEqual(NameMatch.normalizeKey("O’Connor"), "oconnor")
        XCTAssertEqual(NameMatch.normalizeKey("O'CONNOR"), "oconnor")
    }
}
