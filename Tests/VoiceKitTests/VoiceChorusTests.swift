//
//  VoiceChorusTests.swift
//  VoiceKit
//
//  Generated by GPT-5 (OpenAI) â€” collaborator: rdoggett
//  date: 09-17-2025
//
//  Updates for current API:
//  - TTSVoiceProfile no longer has displayName; tests use ids and system names when needed.
//  - TTSVoiceProfile fields are: id: String, rate: Double, pitch: Float, volume: Float.
//  - VoiceChorus.sing(...) is async; ensure awaits correspond to async calls only.
//  - Removed all 'displayName' arguments and property assertions.
//
//  These tests validate VoiceChorus sequencing and engine invocations at a high level.
//

import XCTest
import AVFoundation
@testable import VoiceKit

@MainActor
final class VoiceChorusTests: XCTestCase {

    // A simple fake engine that conforms to TTSConfigurable & VoiceIO and records calls.
    final class FakeEngine: TTSConfigurable, VoiceIO {

        // VoiceIO callbacks
        var onListeningChanged: ((Bool) -> Void)?
        var onTranscriptChanged: ((String) -> Void)?
        var onLevelChanged: ((CGFloat) -> Void)?
        var onTTSSpeakingChanged: ((Bool) -> Void)?
        var onTTSPulse: ((CGFloat) -> Void)?
        var onStatusMessageChanged: ((String?) -> Void)?

        // Tracking
        private(set) var spoken: [(text: String, voiceID: String?)] = []
        private(set) var profiles: [String: TTSVoiceProfile] = [:]
        private(set) var defaultProfile: TTSVoiceProfile?
        private(set) var tuning: Tuning = .init()

        // VoiceIO
        func ensurePermissions() async throws {}
        func configureSessionIfNeeded() async throws {}
        func speak(_ text: String) async {
            spoken.append((text, defaultProfile?.id))
        }
        func listen(timeout: TimeInterval, inactivity: TimeInterval, record: Bool) async throws -> VoiceResult {
            return VoiceResult(transcript: "", recordingURL: nil)
        }
        func prepareClip(url: URL, gainDB: Float) async throws {}
        func startPreparedClip() async throws {}
        func playClip(url: URL, gainDB: Float) async throws {}
        func stopAll() {}
        func hardReset() {}

        // TTSConfigurable
        func setVoiceProfile(_ profile: TTSVoiceProfile) { profiles[profile.id] = profile }
        func getVoiceProfile(id: String) -> TTSVoiceProfile? { profiles[id] }
        func setDefaultVoiceProfile(_ profile: TTSVoiceProfile) { profiles[profile.id] = profile; defaultProfile = profile }
        func getDefaultVoiceProfile() -> TTSVoiceProfile? { defaultProfile }
        func setTuning(_ tuning: Tuning) { self.tuning = tuning }
        func getTuning() -> Tuning { tuning }

        // Extended for tests
        func speak(_ text: String, using voiceID: String?) async {
            spoken.append((text, voiceID))
        }
    }

    func testChorusSpeaksAllProfilesInOrder() async throws {
        // Arrange
        let e = FakeEngine()
        let chorus = VoiceChorus(makeEngine: { e })
        let text = "Testing one two three."

        // Three profiles (no displayName now)
        let p1 = TTSVoiceProfile(id: "com.apple.speech.synthesis.voice.Alex", rate: 0.55, pitch: 1.0, volume: 1.0)
        let p2 = TTSVoiceProfile(id: "com.apple.speech.synthesis.voice.Emily", rate: 0.60, pitch: 1.05, volume: 1.0)
        let p3 = TTSVoiceProfile(id: "com.apple.speech.synthesis.voice.Fred", rate: 0.50, pitch: 0.95, volume: 0.9)

        // Act
        await chorus.sing(text, withVoiceProfiles: [p1, p2, p3])

        // Assert
        // Chorus should have asked engine to speak for each profile in sequence.
        // Depending on VoiceChorus implementation, this could be sequential or concurrent;
        // we verify that all voiceIDs appear at least once in the recorded calls.
        let ids = e.spoken.compactMap { $0.voiceID }
        XCTAssertTrue(ids.contains(p1.id))
        XCTAssertTrue(ids.contains(p2.id))
        XCTAssertTrue(ids.contains(p3.id))
    }

    func testChorusAppliesDefaultAndOverridesPerUtterance() async throws {
        // Arrange
        let e = FakeEngine()
        let chorus = VoiceChorus(makeEngine: { e })
        let text = "Default and overrides."

        // Set a default profile on the engine
        let def = TTSVoiceProfile(id: "com.apple.speech.synthesis.voice.Alex", rate: 0.55, pitch: 1.0, volume: 1.0)
        e.setDefaultVoiceProfile(def)

        // Two override profiles
        let p1 = TTSVoiceProfile(id: "com.apple.speech.synthesis.voice.Emily", rate: 0.60, pitch: 1.05, volume: 1.0)
        let p2 = TTSVoiceProfile(id: "com.apple.speech.synthesis.voice.Fred", rate: 0.50, pitch: 0.95, volume: 0.9)

        // Act
        await chorus.sing(text, withVoiceProfiles: [p1, p2])

        // Assert: calls should include the overridden IDs (not just the default)
        let ids = e.spoken.compactMap { $0.voiceID }
        XCTAssertTrue(ids.contains(p1.id))
        XCTAssertTrue(ids.contains(p2.id))
    }

    func testChorusHandlesEmptyProfilesGracefully() async throws {
        // Arrange
        let e = FakeEngine()
        let chorus = VoiceChorus(makeEngine: { e })

        // Act: with empty array
        await chorus.sing("Nothing to sing.", withVoiceProfiles: [])

        // Assert: no calls recorded
        XCTAssertTrue(e.spoken.isEmpty)
    }
}
