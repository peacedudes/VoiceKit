//
//  RealVoiceIO+Interruption.swift
//  VoiceKit
//
//  Generated by GPT-5 (OpenAI)
//  collaborator: robert
//  date: 09-15-2025
//

import Foundation
@preconcurrency import AVFoundation

@MainActor
extension RealVoiceIO {
    func installInterruptionObservers() {
        #if os(iOS)
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(handleInterruption(_:)),
            name: AVAudioSession.interruptionNotification,
            object: nil
        )
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(handleRouteChange(_:)),
            name: AVAudioSession.routeChangeNotification,
            object: nil
        )
        #endif
    }

    @objc func handleInterruption(_ note: Notification) {
        #if os(iOS)
        guard let info = note.userInfo,
              let typeValue = info[AVAudioSessionInterruptionTypeKey] as? UInt,
              let type = AVAudioSession.InterruptionType(rawValue: typeValue) else { return }
        switch type {
        case .began:
            wasInterrupted = true
            wasPlayingBoost = boostPlayer?.isPlaying ?? false
            boostPlayer?.pause()
            onListeningChanged?(false)
        case .ended:
            let optionsValue = info[AVAudioSessionInterruptionOptionKey] as? UInt
            let shouldResume = optionsValue.map { AVAudioSession.InterruptionOptions(rawValue: $0).contains(.shouldResume) } ?? true
            if shouldResume {
                try? AVAudioSession.sharedInstance().setActive(true, options: [])
                if wasPlayingBoost {
                    try? boostEngine?.start()
                    boostPlayer?.play()
                }
            }
            wasInterrupted = false
            wasPlayingBoost = false
        @unknown default:
            break
        }
        #endif
    }

    @objc func handleRouteChange(_ note: Notification) {
        #if os(iOS)
        guard let info = note.userInfo,
              let reasonValue = info[AVAudioSessionRouteChangeReasonKey] as? UInt,
              let reason = AVAudioSession.RouteChangeReason(rawValue: reasonValue) else { return }
        switch reason {
        case .oldDeviceUnavailable, .categoryChange, .override, .wakeFromSleep, .noSuitableRouteForCategory:
            if audioEngine?.isRunning == true { finishRecognition() }
        default:
            break
        }
        #endif
    }
}