//
//  ScriptedVoiceIO.swift
//  VoiceKit
//
//  Generated by GPT-5 (OpenAI)
//  collaborator: rdoggett
//  date: 09-15-2025
//

import Foundation
import CoreGraphics

@MainActor
public final class ScriptedVoiceIO: VoiceIO {
    public var onListeningChanged: ((Bool) -> Void)?
    public var onTranscriptChanged: ((String) -> Void)?
    public var onLevelChanged: ((CGFloat) -> Void)?
    public var onTTSSpeakingChanged: ((Bool) -> Void)?
    public var onTTSPulse: ((CGFloat) -> Void)?
    public var onStatusMessageChanged: ((String?) -> Void)?

    private var queue: [String]
    private var epoch: Int = 0

    // Convenience non-Base64 init for tests/demos
    public init(script: [String]) {
        self.queue = script
    }

    public init?(fromBase64 jsonBase64: String) {
        guard let data = Data(base64Encoded: jsonBase64),
              let arr = try? JSONSerialization.jsonObject(with: data) as? [String] else {
            return nil
        }
        self.queue = arr
    }

    public func ensurePermissions() async throws { }
    public func configureSessionIfNeeded() async throws { }

    public func speak(_ text: String) async {
        onTTSSpeakingChanged?(true)
        onTTSPulse?(0.35)
        let steps = 6
        for i in 0..<steps {
            let phase = Double(i) / Double(steps - 1)
            let level = 0.28 + 0.24 * sin(phase * .pi)
            onTTSPulse?(CGFloat(level))
            try? await Task.sleep(nanoseconds: 50_000_000)
        }
        onTTSPulse?(0.0)
        onTTSSpeakingChanged?(false)
    }

    public func listen(timeout: TimeInterval, inactivity: TimeInterval, record: Bool) async throws -> VoiceResult {
        let myEpoch = epoch
        onListeningChanged?(true)
        onLevelChanged?(0.2)
        try? await Task.sleep(nanoseconds: 120_000_000)
        if myEpoch != epoch {
            onLevelChanged?(0.0)
            onListeningChanged?(false)
            return VoiceResult(transcript: "", recordingURL: nil)
        }
        let transcript = queue.isEmpty ? "" : queue.removeFirst()
        onTranscriptChanged?(transcript)
        try? await Task.sleep(nanoseconds: 40_000_000)
        onLevelChanged?(0.0)
        onListeningChanged?(false)
        return VoiceResult(transcript: transcript, recordingURL: nil)
    }

    public func prepareClip(url: URL, gainDB: Float) async throws { }
    public func startPreparedClip() async throws { }
    public func playClip(url: URL, gainDB: Float) async throws { }

    public func stopAll() {
        epoch &+= 1
        onListeningChanged?(false)
    }

    public func hardReset() {
        epoch &+= 1
        onListeningChanged?(false)
        onTranscriptChanged?("")
        onLevelChanged?(0)
        onTTSPulse?(0)
        onTTSSpeakingChanged?(false)
        onStatusMessageChanged?(nil)
    }
}
