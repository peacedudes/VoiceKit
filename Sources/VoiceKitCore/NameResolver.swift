//
//  NameResolver.swift
//  VoiceKitCore
//
//  Generated by GPT-5 (OpenAI) — collaborator: rdoggett
//  date: 09-13-2025
//
//  Strict name resolution with a “clean edges” return when no allowed list,
//  and exact match after robust normalization when allowed is provided.
//

import Foundation

public struct NameResolver: Sendable {

    public enum Policy: Sendable {
        case strictExact // exact match after normalization; no nicknames/aliases
    }

    public var policy: Policy = .strictExact

    public init(policy: Policy = .strictExact) {
        self.policy = policy
    }

    /// Resolve a spoken name to an allowed list.
    /// - Behavior:
    ///   - If `allowed` is nil or empty: return the raw input with leading/trailing
    ///     whitespace and punctuation trimmed (preserving original case/diacritics).
    ///   - Else: normalize both transcript and allowed strings by folding case/diacritics,
    ///     removing zero-width/soft hyphens, converting punctuation (including hyphen/dash
    ///     variants) to spaces, and collapsing whitespace. Return the original allowed string
    ///     when a normalized exact match is found; otherwise nil.
    public func resolve(transcript raw: String, allowed: [String]?) -> String? {
        guard let allowed, !allowed.isEmpty else {
            return cleanEdgesPreservingCase(raw)
        }

        // Build normalized lookup → original allowed string
        var table: [String: String] = [:]
        for a in allowed {
            table[normalizeForMatch(a)] = a
        }

        switch policy {
        case .strictExact:
            let key = normalizeForMatch(raw)
            return table[key]
        }
    }

    // MARK: - Helpers

    /// Trim whitespace and leading/trailing punctuation without changing case/diacritics.
    private func cleanEdgesPreservingCase(_ s: String) -> String {
        let trimmed = s.trimmingCharacters(in: .whitespacesAndNewlines)
        // Also trim punctuation at the edges (e.g., "Max!" -> "Max")
        let edgeTrimmed = trimmed.trimmingCharacters(in: .punctuationCharacters)
        return edgeTrimmed
    }

    /// Normalize for strict matching:
    /// - Remove zero-width/soft hyphens.
    /// - Convert hyphen/dash variants and all punctuation to spaces.
    /// - Collapse whitespace to single spaces; trim.
    /// - Fold diacritics and case (lowercased result).
    private func normalizeForMatch(_ s: String) -> String {
        // Remove invisible/soft joiners that can sneak into transcripts
        var t = s
        let invisibles = ["\u{00AD}", // soft hyphen
                          "\u{200B}", // zero-width space
                          "\u{200C}", // zero-width non-joiner
                          "\u{200D}", // zero-width joiner
                          "\u{2060}"] // word joiner
        for ch in invisibles { t = t.replacingOccurrences(of: ch, with: "") }

        // Turn hyphen/dash variants (and ASCII '-') into spaces to align "Jean‑Luc" with "Jean Luc"
        let dashVariants = ["-", "\u{2010}", "\u{2011}", "\u{2012}", "\u{2013}", "\u{2014}", "\u{2212}"]
        for d in dashVariants { t = t.replacingOccurrences(of: d, with: " ") }

        // Replace all remaining punctuation with spaces (commas, periods, quotes, etc.)
        t = t.replacingOccurrences(of: #"[\p{P}]"#, with: " ", options: .regularExpression)

        // Collapse whitespace and trim
        t = t.replacingOccurrences(of: #"\s+"#, with: " ", options: .regularExpression)
            .trimmingCharacters(in: .whitespacesAndNewlines)

        // Fold diacritics and case for matching
        t = t.folding(options: [.diacriticInsensitive, .caseInsensitive], locale: .autoupdatingCurrent)

        return t
    }
}
