//
//  ChorusLabView.swift
//  VoiceKit
//
//  Generated by GPT-5 (OpenAI) — collaborator: rdoggett
//  date: 09-17-2025
//

import SwiftUI
import VoiceKitCore
// MARK: - Design tokens
private enum Metrics {
    enum Padding {
        static let headerV: CGFloat = 4
        static let iosH: CGFloat = 16
        static let macH: CGFloat = 32
    }
    enum Layout {
        static let inlineHintSpacer: CGFloat = 50
        static let actualTimeMinWidth: CGFloat = 60
        static let timingCellWidth: CGFloat = 40
    }
    enum Controls {
        static let sliderStep: Double = 0.01
    }
    enum Defaults {
        // Match initializer types: rate is Double; pitch/volume are Float
        static let rate: Double = 0.55
        static let pitch: Float = 1.0
        static let volume: Float = 1.0
    }
    enum Buttons {
        // Stabilize Play/Stop label swap
        static let playTextMinWidth: CGFloat = 100
        static let horizontalPad: CGFloat = 14
        static let verticalPad: CGFloat = 4
    }
    enum Calibration {
        static let tolerance: Double = 0.05
        static let maxIterations: Int = 3
    }
    enum Timing {
        static let targetSecondsRange: ClosedRange<Double> = 1.0...20.0
        static let targetSecondsStep: Double = 0.25
    }
    enum Adjustments {
        static let slowRange: Double = 0.75
        static let speedRange: ClosedRange<Double> = 0.05...2.0
        static let pitchOffsetRange: ClosedRange<Double> = -0.9...0.9
    }
    enum Pitch {
        static let clampLo: Float = 0.5
        static let clampHi: Float = 2.0
    }
}
@MainActor
struct ChorusLabView: View {
    @State private var selectedProfiles: [TTSVoiceProfile] = []
    @State private var pitch: Float = 1.0
    @State private var rate: Float = 0.55
    @State private var customText: String = "Six swift ships."
    @State private var targetSeconds: Double = 3.0
    @State private var isCalibrating: Bool = false
    @State private var calibrationTask: Task<Void, Never>? = nil
    @State private var lastDurationByID: [String: TimeInterval] = [:]
    @State private var lastChorusSeconds: Double? = nil
    @State private var isPlaying: Bool = false
    @State private var calibratingVoiceID: String? = nil
    // Baseline profiles and global adjustments for chorus-wide tweaks
    @State private var baseProfiles: [TTSVoiceProfile] = []
    @State private var rateScale: Double = 1.0       // Multiplies baseline rate
    @State private var pitchOffset: Double = 0.0     // Adds to baseline pitch

    // Tuner presentation
    @State private var showTuner = false
    @State private var tunerSelection: String? = nil
    @State private var tunerEngine = RealVoiceIO()
    @State private var editingIndex: Int? = nil

    // iOS-only: edit mode toggling for List reordering
    #if os(iOS)
    @Environment(\.editMode) private var editMode
    #endif
    // Dependencies for testability and reuse:
    // - voicesProvider: supplies available system voices
    // - engineFactory: creates RealVoiceIO instances for chorus engines, calibration, and tuner
    let voicesProvider: any SystemVoicesProvider
    let engineFactory: () -> RealVoiceIO
    let chorus: VoiceChorus

    /// Create the Chorus Lab view with injectable dependencies.
    /// - Parameters:
    ///   - voicesProvider: Source of system voices (defaults to SystemVoicesCache).
    ///   - engineFactory: Factory for engines (defaults to RealVoiceIO()).
    init(
        voicesProvider: any SystemVoicesProvider = DefaultSystemVoicesProvider(),
        engineFactory: @escaping () -> RealVoiceIO = { RealVoiceIO() }
    ) {
        self.voicesProvider = voicesProvider
        self.engineFactory = engineFactory
        // VoiceChorus.Engine == any TTSConfigurable & VoiceIO.
        self.chorus = VoiceChorus(makeEngine: {
            engineFactory() as (any TTSConfigurable & VoiceIO)
        })
    }

    var body: some View {
        VStack {
            // Fixed control area
            VStack {
                // Title
                Text("Chorus Lab")
                    .font(.largeTitle)

                // Text input moved to the top
                ZStack(alignment: .topLeading) {
                    ZStack(alignment: .topLeading) {
                        if customText.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {
                            Text("Add voices with +\nPress Play to hear your chorus\nTune Goal, Rate, and Pitch to match")
                                .font(.footnote)
                                .foregroundStyle(.secondary)
                                .multilineTextAlignment(.leading)
                                .lineLimit(nil)
                                .padding(.top, 8)
                                .padding(.leading, 6)
                                .padding(.trailing, 8)
                                .allowsHitTesting(false)
                        }
                        TextEditor(text: $customText)
                            .frame(height: 72, alignment: .topLeading) // ~3 lines, fixed
                            .scrollIndicators(.automatic)
                            .border(Color.gray, width: 0.5)
                            .accessibilityLabel("Chorus text")
                            .accessibilityHint("Enter the phrase the chorus will speak")
                            // VoiceOver will read the text content by default; the hint clarifies purpose.
                            .accessibilityAddTraits(.isStaticText)
                    }
                }

                targetTimeRow()
                globalAdjustmentsSection()
                // Place Play/Stop (and Synchronize all) below sliders and above the Voices section.
                actionButtonsRow()
            }
            .padding()

            // Pinned header for the voices list (does not scroll)
            HStack {
                // Left-aligned header over the name column
                Text("Voices")
                    .font(.title3)
                    .fontWeight(.semibold)
                    .frame(maxWidth: .infinity, alignment: .leading)

                // Trailing action: simple Add button
                Button {
                    presentAddVoice()
                } label: {
                    // Professionals commonly use an icon-only + in toolbars/headers
                    Image(systemName: "plus")
                }
                .accessibilityLabel("Add voice")
                #if os(macOS)
                .buttonStyle(.bordered)
                .controlSize(.small)
                .help("Add")
                #else
                .buttonStyle(.plain)
                #endif
            }
            .padding(.vertical, 4)
            #if os(macOS)
            // On macOS, give the "Voices" header comparable horizontal margins to the control area.
            .padding(.horizontal, Metrics.Padding.macH)
            #else
            .padding(.horizontal, Metrics.Padding.iosH)
            #endif
            .padding(.bottom, 0)
            // List area (enables swipe actions)
            List {
                selectedVoicesSection()
            }
            .listStyle(.plain)
            // Subtle animation for row add/remove or reordering
            .animation(.easeInOut(duration: 0.20), value: selectedProfiles.count)
            #if os(macOS)
            // On macOS, add horizontal padding so the list aligns with the rest of the view.
            .padding(.horizontal, Metrics.Padding.macH)
            #endif
        }
        .sheet(isPresented: $showTuner) {
            // Wrap in a padded container so margins are guaranteed even if VoiceChooserView is edge-to-edge.
            VStack {
                VoiceChooserView(
                    tts: tunerEngine,
                    selectedID: $tunerSelection,
                    onChoose: {
                        applyTunerSelection()
                        showTuner = false
                    },
                    onCancel: {
                        showTuner = false
                    }
                )
            }
            .padding(.horizontal, 16)
            .frame(minWidth: 420, minHeight: 520)
            // iOS-only sheet presentation tweaks
            #if os(iOS)
            .presentationDetents([.large])
            .presentationDragIndicator(.visible)
            #endif
        }
        .onAppear {
            // Keep baseline in sync on first load.
            if baseProfiles.isEmpty, !selectedProfiles.isEmpty {
                baseProfiles = selectedProfiles
            }
            // Pre-seed two voices so the chorus is playable immediately.
            // Seed only once on first appear.
            if selectedProfiles.isEmpty {
                seedInitialVoices(count: 2)
                applyGlobalAdjustments()
            }
        }
        // Safety net: when rows are added/removed, realign baseline and re-apply.
        .onChange(of: selectedProfiles.count) { _, _ in
            baseProfiles = selectedProfiles
            applyGlobalAdjustments()
        }
    }

    // New: Selected voices section with edit/remove
    @ViewBuilder
    private func selectedVoicesSection() -> some View {
        if selectedProfiles.isEmpty {
            Text("Tap “Add voice…” to choose voices and tune pitch/volume.")
                .foregroundStyle(.secondary)
                .padding(.vertical, 8)
        } else {
            ForEach($selectedProfiles, id: \.id) { profile in
                // Unwrap binding element for read-only UI usage in this row
                let profileValue = profile.wrappedValue

                SelectedVoiceRow(
                    name: resolvedName(for: profileValue.id),
                    rate: profileValue.rate,
                    pitch: profileValue.pitch,
                    volume: profileValue.volume,
                    duration: lastDurationByID[profileValue.id],
                    isCalibrating: calibratingVoiceID == profileValue.id
                )
                .contentShape(Rectangle())
                .onTapGesture {
                    if let idx = selectedProfiles.firstIndex(where: { $0.id == profileValue.id }) {
                        presentEditVoice(index: idx)
                    }
                }
                .swipeActions(edge: .trailing, allowsFullSwipe: true) {
                    // Put Sync first so full-swipe defaults to Sync (safer than Delete).
                    Button {
                        if let idx = selectedProfiles.firstIndex(where: { $0.id == profileValue.id }) {
                            synchronizeVoice(at: idx)
                        }
                    } label: {
                        Label("Sync", systemImage: "arrow.clockwise")
                    }
                    .tint(.blue)
                    .accessibilityLabel("Synchronize this voice")
                    .accessibilityHint("Calibrate this voice to the target time")

                    Button(role: .destructive) {
                        // Remove from the effective list and sync baseline so
                        // future global adjustments don’t resurrect this row.
                        let removedID = profileValue.id
                        if let idx = selectedProfiles.firstIndex(where: { $0.id == removedID }) {
                            selectedProfiles.remove(at: idx)
                        }
                        lastDurationByID.removeValue(forKey: removedID)
                        baseProfiles = selectedProfiles
                        applyGlobalAdjustments()
                    } label: { Label("Delete", systemImage: "trash") }
                    .accessibilityLabel("Delete voice")
                }
            }
            // Attach reordering to the ForEach so it works on all platforms.
        }
    }

    // MARK: - Calibration (synchronize rates)
    private func synchronizeRates() {
        guard !selectedProfiles.isEmpty else { return }
        isCalibrating = true
        let phrase = customText
        let prevScale = rateScale
        // Cancel any in-flight calibration task
        calibrationTask?.cancel()
        calibrationTask = Task { @MainActor in
            // Use a dedicated engine for measurement to avoid interfering with the chorus engine
            let io = engineFactory()
            defer {
                isCalibrating = false
                calibrationTask = nil
                // After calibration, refresh selectedProfiles from baseline with current global sliders
                // First, restore the user's speed scale and ensure baseline reflects any calibrated rate changes:
                rateScale = prevScale
                baseProfiles = selectedProfiles
                // Apply global scaling/offset to produce effective profiles:
                var updated: [TTSVoiceProfile] = []
                updated.reserveCapacity(baseProfiles.count)
                for var p in baseProfiles {
                    // Amplified relative mapping (all Double to match TTSVoiceProfile.rate):
                    // - If rateScale > 1, move toward 1.0 by a fraction of headroom.
                    // - If rateScale < 1, move toward 0.0 by a fraction of current value.
                    let base: Double = p.rate
                    let newRate: Double = {
                        if rateScale >= 1.0 {
                            let t = max(0.0, min(1.0, rateScale - 1.0)) // 1.0→2.0 maps to 0…1
                            return (base + (1.0 - base) * t).clamped(to: 0.0...1.0)
                        } else {
                            let t = max(0.0, min(1.0, (1.0 - rateScale) / Metrics.Adjustments.slowRange)) // 1.0→0.25 maps to 0…1
                            return (base - base * t).clamped(to: 0.0...1.0)
                        }
                    }()
                    p.rate = newRate
                    p.pitch = (p.pitch + Float(pitchOffset)).clamped(to: Metrics.Pitch.clampLo...Metrics.Pitch.clampHi)
                    updated.append(p)
                }
                selectedProfiles = updated
            }
            // Normalize global speed during calibration to avoid compounding while fitting
            rateScale = 1.0

            for i in selectedProfiles.indices {
                if Task.isCancelled { return }
                // Ensure the IO has the current profile before measuring
                let voiceID = selectedProfiles[i].id
                calibratingVoiceID = voiceID
                await Task.yield()
                io.setVoiceProfile(selectedProfiles[i])

                // Calibrate this voice to the target duration
                let result = await VoiceTempoCalibrator.fitRate(
                    io: io,
                    voiceID: voiceID,
                    phrase: phrase,
                    targetSeconds: targetSeconds,
                    tolerance: Metrics.Calibration.tolerance,
                    maxIterations: Metrics.Calibration.maxIterations
                )
                // Update the stored and baseline profile with the new rate and last measured duration
                selectedProfiles[i].rate = result.finalRate
                lastDurationByID[voiceID] = result.measured
                // Reflect progress live in the header “actual time” display
                lastChorusSeconds = result.measured
                // Give the UI a chance to refresh during calibration
                await Task.yield()
            }
            calibratingVoiceID = nil
        }
    }

    // MARK: - Header row components
    @ViewBuilder
    private func targetTimeRow() -> some View {
        HStack(spacing: 8) {
            Text("Target Time")
                .font(.footnote)
                .lineLimit(1)
                .layoutPriority(1)
            Text(String(format: "%.2fs", targetSeconds))
                .monospacedDigit()
                .foregroundStyle(.secondary)
            Stepper(value: $targetSeconds, in: Metrics.Timing.targetSecondsRange, step: Metrics.Timing.targetSecondsStep) {
                EmptyView()
            }
            .labelsHidden()
            .controlSize(.mini)
            .accessibilityLabel("Target time")
            .accessibilityHint("Adjust the target duration in seconds")

            // Group the actual time elements for a clear VoiceOver announcement
            // VoiceOver will read the value; the label clarifies context.
            Spacer()
            HStack(spacing: 6) {
                if isPlaying {
                    ProgressView().controlSize(.mini)
                }
                Text(lastChorusSeconds.map { $0.asSeconds2f } ?? "—s")
                    .monospacedDigit()
                    .foregroundStyle(.secondary)
                    .lineLimit(1)
            }
            .frame(minWidth: Metrics.Layout.actualTimeMinWidth, alignment: .trailing)
            .accessibilityLabel("Actual time")
            .accessibilityValue(lastChorusSeconds.map { $0.asSeconds2f } ?? "Not available")
        }
        .padding(.horizontal)
        .padding(.bottom, Metrics.Padding.headerV)
    }

    @ViewBuilder
    private func actionButtonsRow() -> some View {
        ActionRowView(
            isPlaying: $isPlaying,
            isCalibrating: $isCalibrating,
            hasSelection: !selectedProfiles.isEmpty,
            onPlay: { startChorus() },
            onStop: { stopAll() },
            onSync: { synchronizeRates() }
        )
        .padding(.bottom, Metrics.Padding.headerV)
    }

    // MARK: - Extracted components
    fileprivate struct ActionRowView: View {
        @Binding var isPlaying: Bool
        @Binding var isCalibrating: Bool
        var hasSelection: Bool
        var onPlay: () -> Void
        var onStop: () -> Void
        var onSync: () -> Void

        var body: some View {
            VStack(spacing: 6) {
                // Single row: Stop/Play on the left; either Synchronize or Calibrating… to its right
                HStack(spacing: 12) {
                    Button {
                        if isPlaying || isCalibrating { onStop() } else { onPlay() }
                    } label: {
                        // Keep width stable by layering both icon states and both titles
                        HStack(spacing: 6) {
                            ZStack {
                                Image(systemName: "stop.fill")
                                    .opacity((isPlaying || isCalibrating) ? 1 : 0)
                                Image(systemName: "play.fill")
                                    .opacity((isPlaying || isCalibrating) ? 0 : 1)
                            }
                            ZStack {
                                Text("Stop")
                                    .opacity((isPlaying || isCalibrating) ? 1 : 0)
                                Text("Play Chorus")
                                    .opacity((isPlaying || isCalibrating) ? 0 : 1)
                            }
                            .frame(minWidth: Metrics.Buttons.playTextMinWidth, alignment: .leading) // stabilize text width
                        }
                        .padding(.horizontal, Metrics.Buttons.horizontalPad)
                        .padding(.vertical, Metrics.Buttons.verticalPad)
                        .accessibilityLabel((isPlaying || isCalibrating) ? "Stop" : "Play Chorus")
                        .accessibilityHint((isPlaying || isCalibrating) ? "Stop playback and calibration" : "Start playing all voices")
                        .accessibilityAddTraits(.isButton)
                    }
                    .buttonStyle(.borderedProminent)
                    .tint((isPlaying || isCalibrating) ? .red : .blue)
                    .controlSize(.regular)
                    .disabled(!hasSelection && !(isPlaying || isCalibrating))
                    // Right-side: Synchronize (idle) or Calibrating… (busy), kept on the same line for smoother transitions
                    if isCalibrating {
                        HStack(spacing: 6) {
                            ProgressView().controlSize(.small)
                            Text("Calibrating…").foregroundStyle(.secondary)
                        }
                    } else if !isPlaying {
                        Button { onSync() } label: {
                            Label("Synchronize", systemImage: "metronome.fill")
                        }
                        .accessibilityIdentifier("vk.syncAll")
                        .buttonStyle(.bordered)
                        .tint(.secondary)
                        .controlSize(.small)
                        .accessibilityLabel("Synchronize all")
                        .accessibilityHint("Calibrate all voices to the target time")
                        .disabled(!hasSelection)
                    }
                    Spacer()
                }
            }
        }
    }

    @ViewBuilder
    private func globalAdjustmentsSection() -> some View {
        GlobalAdjustmentsView(
            rateScale: $rateScale,
            pitchOffset: $pitchOffset,
            onChange: { applyGlobalAdjustments() }
        )
    }

    // MARK: - Extracted: Global adjustments controls
    fileprivate struct GlobalAdjustmentsView: View {
        @Binding var rateScale: Double
        @Binding var pitchOffset: Double
        var onChange: () -> Void

        var body: some View {
            VStack(spacing: 8) {
                TunerSliderRow(
                    title: "Speed",
                    systemImage: "speedometer",
                    value: $rateScale,
                    range: Metrics.Adjustments.speedRange,
                    step: Metrics.Controls.sliderStep,
                    formatted: { v in String(format: "%.2f×", Double(v)) }
                )
                .onChange(of: rateScale) { _, _ in onChange() }


                TunerSliderRow(
                    title: "Pitch", systemImage: "waveform.path.ecg",
                    value: $pitchOffset, range: Metrics.Adjustments.pitchOffsetRange, step: Metrics.Controls.sliderStep,
                    formatted: { off in String(format: "%.2f", 1.0 + Double(off)) }
                ).onChange(of: pitchOffset) { _, _ in onChange() }
            }
        }
    }

    // MARK: - Small extracted cells
    fileprivate struct DetailsCell: View {
        let rate: Double
        let pitch: Float
        let volume: Float
        var body: some View {
            Text(String(format: "Speed %.2f · Pitch %.2f · Vol %.2f",
                        rate, pitch, volume))
                .font(.caption2)
                .foregroundStyle(.secondary)
                .lineLimit(1)
                .minimumScaleFactor(0.9)        // allow slight shrink before truncation
                .allowsTightening(true)
                .truncationMode(.tail)
                .frame(width: 190, alignment: .trailing)
        }
    }

    fileprivate struct DurationCell: View {
        let duration: TimeInterval?
        let isHighlighted: Bool
        var body: some View {
            let text = duration.map { $0.asSeconds2f } ?? ""
            Text(text)
                .font(.footnote)
                .monospacedDigit()
                .foregroundStyle(duration == nil ? .secondary : .primary)
                .frame(width: Metrics.Layout.timingCellWidth, alignment: .trailing)
                .padding(.vertical, 2)
                .background {
                    if isHighlighted {
                        RoundedRectangle(cornerRadius: 4)
                            .fill(Color.yellow.opacity(0.30))
                    }
                }
                .animation(.easeInOut(duration: 0.2), value: isHighlighted)
        }
    }

    /// A single row presenting a selected voice profile.
    /// Uses small cells for details and duration to keep layout tidy.
    /// Provide data and attach gestures/swipe actions at the call site for clarity.
    fileprivate struct SelectedVoiceRow: View {
        let name: String
        let rate: Double
        let pitch: Float
        let volume: Float
        let duration: TimeInterval?
        let isCalibrating: Bool

        var body: some View {
            HStack(alignment: .firstTextBaseline, spacing: 8) {
                // Name (left)
                Text(name)
                    .font(.subheadline)
                    .lineLimit(1)
                    .minimumScaleFactor(0.9)
                    .allowsTightening(true)
                    .truncationMode(.tail)
                    .layoutPriority(1)
                    .frame(maxWidth: .infinity, alignment: .leading)
                    .accessibilityLabel("Voice name")
                    .accessibilityValue(Text(name))

                Spacer(minLength: 0)

                // Details (middle)
                DetailsCell(rate: rate, pitch: pitch, volume: volume)
                    .accessibilityLabel("Voice settings")
                    .accessibilityValue(Text(String(format: "Speed %.2f, Pitch %.2f, Volume %.2f", rate, pitch, volume)))

                // Timing (right)
                DurationCell(duration: duration, isHighlighted: isCalibrating)
                    .accessibilityLabel("Last duration")
                    .accessibilityValue(Text(duration.map { SecondsFormatter.twoDecimals($0) } ?? "Not measured"))

                Image(systemName: "chevron.right")
                    .font(.caption2)
                    .foregroundStyle(.tertiary)
                    .frame(width: 6, alignment: .trailing)
                    .accessibilityHidden(true)
            }
            // Make the whole row read as a single actionable item
            .accessibilityAddTraits(.isButton)
        }
    }

    // Synchronize a single voice (row-level). Runs a focused calibration for that index.
    private func synchronizeVoice(at index: Int) {
        guard selectedProfiles.indices.contains(index) else { return }
        // Avoid overlapping with any in-flight calibration or playback.
        if isCalibrating || isPlaying { return }

        isCalibrating = true
        let phrase = customText
        let voiceID = selectedProfiles[index].id
        let prevScale = rateScale

        calibrationTask?.cancel()
        calibrationTask = Task { @MainActor in
            let io = engineFactory()
            defer {
                isCalibrating = false
                calibratingVoiceID = nil
                calibrationTask = nil
                // Refresh baseline and re-apply global adjustments
                rateScale = prevScale
                baseProfiles = selectedProfiles
                var updated: [TTSVoiceProfile] = []
                updated.reserveCapacity(baseProfiles.count)
                for var p in baseProfiles {
                    let base: Double = p.rate
                    let newRate: Double = {
                        if rateScale >= 1.0 {
                            let t = max(0.0, min(1.0, rateScale - 1.0))
                            return (base + (1.0 - base) * t).clamped(to: 0.0...1.0)
                        } else {
                            let t = max(0.0, min(1.0, (1.0 - rateScale) / Metrics.Adjustments.slowRange))
                            return (base - base * t).clamped(to: 0.0...1.0)
                        }
                    }()
                    p.rate = newRate
                    p.pitch = (p.pitch + Float(pitchOffset)).clamped(to: Metrics.Pitch.clampLo...Metrics.Pitch.clampHi)
                    updated.append(p)
                }
                selectedProfiles = updated
            }

            // Normalize global speed during calibration to avoid compounding while fitting
            rateScale = 1.0
            calibratingVoiceID = voiceID
            await Task.yield()
            io.setVoiceProfile(selectedProfiles[index])
            let result = await VoiceTempoCalibrator.fitRate(
                io: io, voiceID: voiceID, phrase: phrase,
                targetSeconds: targetSeconds, tolerance: Metrics.Calibration.tolerance, maxIterations: Metrics.Calibration.maxIterations
            )
            selectedProfiles[index].rate = result.finalRate
            lastDurationByID[voiceID] = result.measured
            lastChorusSeconds = result.measured
        }
    }

    private func startChorus() {
        Task {
            isPlaying = true
            let t0 = Date()
            await chorus.sing(customText, withVoiceProfiles: selectedProfiles)
            let elapsed = Date().timeIntervalSince(t0)
            // Update actual duration shown next to the target stepper
            self.lastChorusSeconds = elapsed
            isPlaying = false
        }
    }

    // Cancel any in-flight calibration and stop the chorus immediately.
    private func stopAll() {
        // Cancel calibration if running
        calibrationTask?.cancel()
        calibrationTask = nil
        isCalibrating = false
        // Stop any ongoing chorus playback
        chorus.stop()
        // Reflect stop in UI immediately; the sing task will return shortly.
        if isPlaying {
            isPlaying = false
        }
    }

    // Use system voices (RealVoiceIO no longer exposes availableVoices()).
    @MainActor func availableVoices() -> [TTSVoiceInfo] {
        voicesProvider.all()
            .sorted { $0.name.localizedCaseInsensitiveCompare($1.name) == .orderedAscending }
    }

    /// Seed initial voices so users can play the chorus immediately.
    /// Picks `count` random distinct system voices from the current language and nudges pitch to differentiate.
    private func seedInitialVoices(count: Int = 2) {
        // Filter to current language base code (e.g., "en").
        let baseLang: String = {
            let tag = Locale.preferredLanguages.first ?? Locale.current.identifier
            if let dash = tag.firstIndex(of: "-") { return String(tag[..<dash]).lowercased() }
            return tag.lowercased()
        }()
        let list = availableVoices().filter {
            let lang = $0.language
            let code: String = {
                if let dash = lang.firstIndex(of: "-") { return String(lang[..<dash]).lowercased() }
                return lang.lowercased()
            }()
            return code == baseLang
        }
        guard !list.isEmpty else { return }

        // Random without replacement
        let slice = Array(list.shuffled().prefix(max(0, count)))
        var picks: [TTSVoiceProfile] = []
        let pitchOffsets: [Float] = [-0.05, 0.05, 0.1, -0.1]

        for (i, v) in slice.enumerated() {
            var p = TTSVoiceProfile(id: v.id, rate: Metrics.Defaults.rate, pitch: Metrics.Defaults.pitch, volume: Metrics.Defaults.volume)
            if i < pitchOffsets.count {
                p.pitch = (p.pitch + pitchOffsets[i]).clamped(to: Metrics.Pitch.clampLo...Metrics.Pitch.clampHi)
            }
            picks.append(p)
        }
        // Establish baseline and effective selections
        baseProfiles = picks
        selectedProfiles = picks
    }

    // MARK: - Tuner integration
    /// Present the voice tuner to add a new voice.
    /// Seeds the tuner with a random voice from the user's preferred language.
    private func presentAddVoice() {
        editingIndex = nil
        // Use the injected engine factory for testability and consistency.
        tunerEngine = engineFactory()
        // Prefer a random voice from the user’s preferred language; fall back to any.
        let baseLang: String = {
            let tag = Locale.preferredLanguages.first ?? Locale.current.identifier
            if let dash = tag.firstIndex(of: "-") { return String(tag[..<dash]).lowercased() }
            return tag.lowercased()
        }()
        let sameLang = availableVoices().filter {
            let lang = $0.language
            let code: String = {
                if let dash = lang.firstIndex(of: "-") { return String(lang[..<dash]).lowercased() }
                return lang.lowercased()
            }()
            return code == baseLang
        }
        let pool = sameLang.isEmpty ? availableVoices() : sameLang
        if let pick = pool.randomElement() {
            tunerSelection = pick.id
            let seed = TTSVoiceProfile(id: pick.id, rate: Metrics.Defaults.rate, pitch: Metrics.Defaults.pitch, volume: Metrics.Defaults.volume)
            tunerEngine.setVoiceProfile(seed)
            tunerEngine.setDefaultVoiceProfile(seed)
        } else {
            tunerSelection = nil
        }
        showTuner = true
    }

    private func presentEditVoice(index: Int) {
        guard selectedProfiles.indices.contains(index) else { return }
        editingIndex = index
        tunerEngine = engineFactory()
        // Seed tuner with current profile
        let prof = selectedProfiles[index]
        tunerEngine.setVoiceProfile(prof)
        tunerEngine.setDefaultVoiceProfile(prof) // ensure sliders reflect the current row exactly
        tunerSelection = prof.id
        showTuner = true
    }

    private func applyTunerSelection() {
        guard let id = tunerSelection else { return }
        // Prefer the specific profile returned by the tuner engine; fall back to its default;
        // finally, seed a mid profile if neither is available yet.
        var tuned: TTSVoiceProfile? = tunerEngine.getVoiceProfile(id: id)
        if tuned == nil, let def = tunerEngine.getDefaultVoiceProfile() {
            tuned = TTSVoiceProfile(id: id, rate: def.rate, pitch: def.pitch, volume: def.volume)
        }
        if tuned == nil {
            tuned = TTSVoiceProfile(id: id, rate: Metrics.Defaults.rate, pitch: Metrics.Defaults.pitch, volume: Metrics.Defaults.volume)
        }
        guard let tuned else { return }
        if let idx = editingIndex, selectedProfiles.indices.contains(idx) {
            // Editing an existing row updates only that row
            selectedProfiles[idx] = tuned
        } else {
            // Always allow duplicates when adding
            selectedProfiles.append(tuned)
        }
        // Clear edit state
        editingIndex = nil
        tunerSelection = nil
        // Keep baseline aligned to effective list, then re-apply globals
        baseProfiles = selectedProfiles
        // Re-apply global adjustments so effective profiles reflect sliders
        applyGlobalAdjustments()
    }

    private func resolvedName(for id: String) -> String {
        if let v = availableVoices().first(where: { $0.id == id }) {
            return v.name
        }
        return "Voice"
    }

    // Apply global sliders to baseline -> effective profiles
    private func applyGlobalAdjustments() {
        guard !baseProfiles.isEmpty else { return }
        selectedProfiles = baseProfiles.map { base in
            var profile = base
            // Amplified relative mapping (Double)
            let baseRate: Double = profile.rate
            let newRate: Double = {
                if rateScale >= 1.0 {
                    // 1.0→2.0 maps to t: 0…1, push toward 1.0 by headroom
                    let t = max(0.0, min(1.0, rateScale - 1.0))
                    return (baseRate + (1.0 - baseRate) * t).clamped(to: 0.0...1.0)
                } else {
                    // 1.0→0.25 maps to t: 0…1, pull toward 0.0 by fraction of current
                    let t = max(0.0, min(1.0, (1.0 - rateScale) / Metrics.Adjustments.slowRange))
                    return (baseRate - baseRate * t).clamped(to: 0.0...1.0)
                }
            }()
            profile.rate = newRate
            profile.pitch = (profile.pitch + Float(pitchOffset)).clamped(to: Metrics.Pitch.clampLo...Metrics.Pitch.clampHi)
            return profile
        }
    }
}

struct ChorusLabView_Previews: PreviewProvider {
    static var previews: some View {
        Group {
            #if os(macOS)
            ChorusLabView()
                .frame(width: 520, height: 820) // taller, narrower for Mac preview
                .previewDisplayName("macOS")
            #else
            ChorusLabView()
                .previewDisplayName("iOS")
            #endif
        }
    }
}


// Clamp helper for global adjustments
private extension Comparable {
    func clamped(to range: ClosedRange<Self>) -> Self {
        min(max(self, range.lowerBound), range.upperBound)
    }
}


// MARK: - Formatting helpers
private extension Double {
    // Two-decimal seconds with ASCII 's' suffix
    var asSeconds2f: String { String(format: "%.2fs", self) }
}

// MARK: - Unit-testable helpers
/// Helpers for chorus tuning logic. Pure and unit-testable.
enum ChorusMath {
    /// Compute an adjusted rate from a baseline rate and a global rate scale.
    /// Mapping is amplified relative to the base:
    /// - rateScale > 1.0 moves toward 1.0 by a fraction of headroom (1.0 - base)
    /// - rateScale < 1.0 pulls toward 0.0 by a fraction of the base value
    /// Values are clamped to 0...1 to match TTSVoiceProfile.rate expectations.
    /// - Parameters:
    ///   - baseRate: The original voice rate, in 0...1.
    ///   - rateScale: Global multiplier. 1.0 = unchanged; >1.0 speeds up; <1.0 slows down.
    ///   - slowRange: Denominator for mapping 1.0→0.x into t:0...1 (prevents over-slowing too quickly).
    /// - Returns: New rate in 0...1.
    static func adjustedRate(baseRate: Double, rateScale: Double, slowRange: Double) -> Double {
        if rateScale >= 1.0 {
            // Map 1.0→2.0 into t:0...1 and push toward 1.0 by headroom
            let t = max(0.0, min(1.0, rateScale - 1.0))
            return (baseRate + (1.0 - baseRate) * t).clamped(to: 0.0...1.0)
        } else {
            // Map 1.0→0.25 into t:0...1 and pull toward 0.0 by fraction of base
            let t = max(0.0, min(1.0, (1.0 - rateScale) / slowRange))
            return (baseRate - baseRate * t).clamped(to: 0.0...1.0)
        }
    }

    /// Apply global rate scale and pitch offset to a set of baseline profiles.
    /// - Parameters:
    ///   - baseProfiles: The baseline chorus (not mutated).
    ///   - rateScale: Global rate multiplier (see adjustedRate).
    ///   - pitchOffset: Global offset added to pitch, then clamped.
    /// - Returns: New profiles array with adjusted rate and pitch.
    static func applyAdjustments(
        baseProfiles: [TTSVoiceProfile],
        rateScale: Double,
        pitchOffset: Double
    ) -> [TTSVoiceProfile] {
        var updated: [TTSVoiceProfile] = []
        updated.reserveCapacity(baseProfiles.count)
        for var profile in baseProfiles {
            profile.rate = adjustedRate(baseRate: profile.rate, rateScale: rateScale, slowRange: Metrics.Adjustments.slowRange)
            profile.pitch = (profile.pitch + Float(pitchOffset)).clamped(to: Metrics.Pitch.clampLo...Metrics.Pitch.clampHi)
            updated.append(profile)
        }
        return updated
    }
}

/// Seconds formatting helpers (pure; suitable for tests).
enum SecondsFormatter {
    static func twoDecimals(_ seconds: Double) -> String { String(format: "%.2fs", seconds) }
}

// MARK: - Injected dependencies
/// Abstraction over the source of system voices, to enable testing and reuse.
protocol SystemVoicesProvider {
    @MainActor
    func all() -> [TTSVoiceInfo]
}

/// Default provider backed by SystemVoicesCache.
struct DefaultSystemVoicesProvider: SystemVoicesProvider {
    @MainActor
    func all() -> [TTSVoiceInfo] {
        SystemVoicesCache.all()
    }
}
