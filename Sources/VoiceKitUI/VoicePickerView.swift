//
//  VoicePickerView.swift
//  VoiceKitUI
//
//  Generated by GPT-5 (OpenAI) — collaborator: rdoggett
//  date: 09-12-2025
//
//  Voice picker with:
//  - Filter by Current Language Name | All (button shows current language).
//  - Tap a row to hear a fixed sample.
//  - Live interrupting previews on slider changes with suffix.
//  - Multiple “Active” voices and optional Favorite star.
//  - Swipe to Hide/Unhide, plus “Show hidden voices” toggle.
//  - Master sliders: immediate updates, plus a debounced sample (favorite or random active).
//  - Labels use “range” instead of “variation” for simpler wording.
//
//  Package notes:
//  - This file lives in the VoiceKitUI target and depends on VoiceKitCore.
//  - All exported types are public so an app can use the picker directly.
//

import SwiftUI
import Combine
import Foundation
import VoiceKitCore

// MARK: - Persistence model

public struct VoiceProfilesFile: Codable {
    public var defaultVoiceID: String?
    public var master: TTSMasterControl
    public var profilesByID: [String: TTSVoiceProfile]
    public var activeVoiceIDs: [String]

    public init(defaultVoiceID: String? = nil,
                master: TTSMasterControl = .init(),
                profilesByID: [String: TTSVoiceProfile] = [:],
                activeVoiceIDs: [String] = []) {
        self.defaultVoiceID = defaultVoiceID
        self.master = master
        self.profilesByID = profilesByID
        self.activeVoiceIDs = activeVoiceIDs
    }
}

@MainActor
public final class VoiceProfilesStore: ObservableObject {
    @Published public var defaultVoiceID: String?
    @Published public var master: TTSMasterControl = .init()
    @Published public var profilesByID: [String: TTSVoiceProfile] = [:]
    @Published public var activeVoiceIDs: Set<String> = []

    private let fileURL: URL

    public init(filename: String = "voices.json") {
        let appSupport = FileManager.default.urls(for: .applicationSupportDirectory, in: .userDomainMask).first
            ?? FileManager.default.temporaryDirectory
        let dir = appSupport.appendingPathComponent("VoiceIO", isDirectory: true)
        try? FileManager.default.createDirectory(at: dir, withIntermediateDirectories: true)
        self.fileURL = dir.appendingPathComponent(filename)
        load()
    }

    public func load() {
        guard let data = try? Data(contentsOf: fileURL) else { return }
        if let decoded = try? JSONDecoder().decode(VoiceProfilesFile.self, from: data) {
            self.defaultVoiceID = decoded.defaultVoiceID
            self.master = decoded.master
            self.profilesByID = decoded.profilesByID
            self.activeVoiceIDs = Set(decoded.activeVoiceIDs)
        }
    }

    public func save() {
        let payload = VoiceProfilesFile(
            defaultVoiceID: defaultVoiceID,
            master: master,
            profilesByID: profilesByID,
            activeVoiceIDs: Array(activeVoiceIDs)
        )
        if let data = try? JSONEncoder().encode(payload) {
            try? data.write(to: fileURL, options: [.atomic])
        }
    }

    public func profile(for info: TTSVoiceInfo) -> TTSVoiceProfile {
        if let p = profilesByID[info.id] { return p }
        let p = TTSVoiceProfile(id: info.id, displayName: info.name, rate: 0.55, pitch: 1.0, volume: 0.9)
        profilesByID[info.id] = p
        return p
    }

    public func setProfile(_ p: TTSVoiceProfile) { profilesByID[p.id] = p }

    public func isActive(_ id: String) -> Bool { activeVoiceIDs.contains(id) }
    public func toggleActive(_ id: String) {
        if activeVoiceIDs.contains(id) { activeVoiceIDs.remove(id) }
        else { activeVoiceIDs.insert(id) }
        save()
    }

    public func isHidden(_ id: String) -> Bool { profilesByID[id]?.isHidden ?? false }
    public func setHidden(_ id: String, _ hidden: Bool) {
        if var p = profilesByID[id] {
            p.isHidden = hidden
            profilesByID[id] = p
            save()
        }
    }
}

// MARK: - ViewModel

@MainActor
public final class VoicePickerViewModel: ObservableObject {
    @Published public var voices: [TTSVoiceInfo] = []
    @Published public var showHidden: Bool = false

    public enum LanguageFilter: Hashable { case current, all }
    @Published public var languageFilter: LanguageFilter = .current

    private var previewTask: Task<Void, Never>?
    private var masterPreviewDebounce: Task<Void, Never>?

    public let tts: TTSConfigurable
    public let store: VoiceProfilesStore

    public init(tts: TTSConfigurable, store: VoiceProfilesStore) {
        self.tts = tts
        self.store = store
        refreshAvailableVoices()
        bootstrapDefaultsIfNeeded()
        applyToTTS()
    }

    public func refreshAvailableVoices() {
        voices = tts.availableVoices().sorted { a, b in
            if a.language == b.language { return a.name < b.name }
            return a.language < b.language
        }
    }

    private func languageCodePrefix() -> String {
        let tag = Locale.preferredLanguages.first ?? Locale.current.identifier
        let code = tag.split(separator: "-").first.map(String.init) ?? "en"
        return code.lowercased()
    }

    public var currentLanguageDisplayName: String {
        let code = languageCodePrefix()
        return Locale.current.localizedString(forLanguageCode: code)?.capitalized ?? code.uppercased()
    }

    public var filteredVoices: [TTSVoiceInfo] {
        let base: [TTSVoiceInfo]
        switch languageFilter {
        case .all: base = voices
        case .current:
            let pref = languageCodePrefix()
            base = voices.filter { $0.language.lowercased().hasPrefix(pref) }
        }
        return base.filter { info in showHidden || !store.isHidden(info.id) }
    }

    private func bootstrapDefaultsIfNeeded() {
        if store.defaultVoiceID == nil, let first = filteredVoices.first ?? voices.first {
            store.defaultVoiceID = first.id
        }
        for v in voices {
            _ = store.profile(for: v)
        }
        store.save()
    }

    public func applyToTTS() {
        for (_, p) in store.profilesByID { tts.setVoiceProfile(p) }
        if let id = store.defaultVoiceID, let p = store.profilesByID[id] {
            tts.setDefaultVoiceProfile(p)
        }
        tts.setMasterControl(store.master)
    }

    public func setDefaultVoice(id: String) {
        store.defaultVoiceID = id
        store.save()
        applyToTTS()
    }

    public func updateProfile(_ p: TTSVoiceProfile) {
        store.setProfile(p)
        store.save()
        if store.defaultVoiceID == p.id { tts.setDefaultVoiceProfile(p) }
        else { tts.setVoiceProfile(p) }
        tts.setMasterControl(store.master)
    }

    // Master: immediate apply + debounced preview on favorite/random active/random any
    public func updateMaster(_ m: TTSMasterControl, previewKind: String? = nil) {
        store.master = m
        store.save()
        tts.setMasterControl(m) // immediate so UI feels direct

        // Debounced preview announce (e.g., "at volume 1.10")
        if let kind = previewKind {
            masterPreviewDebounce?.cancel()
            masterPreviewDebounce = Task { [weak self] in
                guard let self else { return }
                try? await Task.sleep(nanoseconds: 160_000_000) // 160ms debounce
                let (id, profile) = self.pickPreviewVoice()
                let phrase = self.samplePhrase(for: profile, suffix: kind)
                self.playPreview(phrase: phrase, voiceID: id)
            }
        }
    }

    private func pickPreviewVoice() -> (String, TTSVoiceProfile) {
        if let fav = store.defaultVoiceID, let p = store.profilesByID[fav] { return (fav, p) }
        let active = filteredVoices.filter { store.isActive($0.id) }
        if let info = (active.isEmpty ? filteredVoices : active).randomElement() {
            return (info.id, store.profile(for: info))
        }
        // Fallback: any
        let any = voices.first!
        return (any.id, store.profile(for: any))
    }

    public func samplePhrase(for profile: TTSVoiceProfile, suffix: String = "") -> String {
        let who = profile.displayName.isEmpty ? "Alex" : profile.displayName
        let base = "My name is \(who). This is what my voice sounds like"
        return suffix.isEmpty ? base + "." : base + " " + suffix + "."
    }

    public func playPreview(phrase: String, voiceID: String) {
        previewTask?.cancel()
        tts.stopSpeakingNow()
        previewTask = Task { [tts] in
            if Task.isCancelled { return }
            await tts.speak(phrase, using: voiceID)
        }
    }

    public func stopPreview() {
        previewTask?.cancel()
        masterPreviewDebounce?.cancel()
        tts.stopSpeakingNow()
    }
}

// MARK: - View

public struct VoicePickerView: View {
    @ObservedObject private var store: VoiceProfilesStore
    @StateObject private var vm: VoicePickerViewModel

    @MainActor
    public init(tts: TTSConfigurable) {
        let s = VoiceProfilesStore()
        _store = ObservedObject(wrappedValue: s)
        _vm = StateObject(wrappedValue: VoicePickerViewModel(tts: tts, store: s))
    }

    @MainActor
    public init(tts: TTSConfigurable, store: VoiceProfilesStore) {
        _store = ObservedObject(wrappedValue: store)
        _vm = StateObject(wrappedValue: VoicePickerViewModel(tts: tts, store: store))
    }

    public var body: some View {
        NavigationView {
            Form {
                Section("Master") {
                    HStack {
                        Label("Volume", systemImage: "speaker.wave.2.fill")
                        Slider(
                            value: Binding(
                                get: { Double(store.master.volume) },
                                set: { newVal in
                                    vm.updateMaster(
                                        TTSMasterControl(volume: Float(newVal),
                                                         pitchVariation: store.master.pitchVariation,
                                                         rateVariation: store.master.rateVariation),
                                        previewKind: "at volume \(String(format: "%.2f", newVal))"
                                    )
                                }
                            ),
                            in: 0...2, step: 0.01
                        )
                        Text(String(format: "%.2f", store.master.volume))
                            .monospacedDigit()
                            .foregroundStyle(.secondary)
                            .frame(width: 52, alignment: .trailing)
                    }
                    HStack {
                        Label("Pitch range", systemImage: "waveform")
                        Slider(
                            value: Binding(
                                get: { Double(store.master.pitchVariation) },
                                set: { newVal in
                                    vm.updateMaster(
                                        TTSMasterControl(volume: store.master.volume,
                                                         pitchVariation: Float(newVal),
                                                         rateVariation: store.master.rateVariation),
                                        previewKind: "with pitch range \(String(format: "%.3f", newVal))"
                                    )
                                }
                            ),
                            in: 0...0.2, step: 0.001
                        )
                        Text(String(format: "%.3f", store.master.pitchVariation))
                            .monospacedDigit()
                            .foregroundStyle(.secondary)
                            .frame(width: 62, alignment: .trailing)
                    }
                    HStack {
                        Label("Speed range", systemImage: "speedometer")
                        Slider(
                            value: Binding(
                                get: { Double(store.master.rateVariation) },
                                set: { newVal in
                                    vm.updateMaster(
                                        TTSMasterControl(volume: store.master.volume,
                                                         pitchVariation: store.master.pitchVariation,
                                                         rateVariation: Float(newVal)),
                                        previewKind: "with speed range \(String(format: "%.3f", newVal))"
                                    )
                                }
                            ),
                            in: 0...0.2, step: 0.001
                        )
                        Text(String(format: "%.3f", store.master.rateVariation))
                            .monospacedDigit()
                            .foregroundStyle(.secondary)
                            .frame(width: 62, alignment: .trailing)
                    }
                }

                Section("Voices") {
                    HStack {
                        Picker("Filter", selection: $vm.languageFilter) {
                            Text(vm.currentLanguageDisplayName).tag(VoicePickerViewModel.LanguageFilter.current)
                            Text("All").tag(VoicePickerViewModel.LanguageFilter.all)
                        }
                        .pickerStyle(.segmented)
                        Toggle("Show hidden", isOn: $vm.showHidden)
                            .toggleStyle(.switch)
                    }

                    if vm.filteredVoices.isEmpty {
                        Text("No system voices available for this filter.")
                            .foregroundStyle(.secondary)
                    } else {
                        ForEach(vm.filteredVoices, id: \.id) { info in
                            VoiceRow(
                                info: info,
                                profile: store.profile(for: info),
                                isActive: store.isActive(info.id),
                                isFavorite: store.defaultVoiceID == info.id,
                                isHidden: store.isHidden(info.id),
                                onToggleActive: { store.toggleActive(info.id) },
                                onFavorite: { vm.setDefaultVoice(id: info.id) },
                                onHide: { store.setHidden(info.id, true) },
                                onUnhide: { store.setHidden(info.id, false) },
                                onChange: { updated, suffix in
                                    vm.updateProfile(updated)
                                    vm.playPreview(phrase: vm.samplePhrase(for: updated, suffix: suffix),
                                                   voiceID: info.id)
                                },
                                onTapRow: {
                                    let p = store.profile(for: info)
                                    vm.playPreview(phrase: vm.samplePhrase(for: p), voiceID: info.id)
                                }
                            )
                        }
                    }
                }
            }
            .navigationTitle("Voices")
        }
        .onDisappear {
            vm.stopPreview()
        }
    }
}

// MARK: - Components

private struct VoiceRow: View {
    let info: TTSVoiceInfo
    @State var profile: TTSVoiceProfile
    let isActive: Bool
    let isFavorite: Bool
    let isHidden: Bool
    let onToggleActive: () -> Void
    let onFavorite: () -> Void
    let onHide: () -> Void
    let onUnhide: () -> Void
    let onChange: (TTSVoiceProfile, String) -> Void
    let onTapRow: () -> Void

    @State private var expanded = false

    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            HStack(spacing: 12) {
                Button(action: onToggleActive) {
                    Image(systemName: isActive ? "checkmark.circle.fill" : "circle")
                        .foregroundStyle(isActive ? AnyShapeStyle(.tint) : AnyShapeStyle(.secondary))
                        .imageScale(.large)
                        .accessibilityLabel(isActive ? "Active" : "Make Active")
                }
                .buttonStyle(.plain)

                VStack(alignment: .leading) {
                    HStack {
                        Text(profile.displayName.isEmpty ? info.name : profile.displayName)
                            .font(.headline)
                        if isHidden {
                            Text("Hidden")
                                .font(.caption2)
                                .padding(.horizontal, 6)
                                .padding(.vertical, 2)
                                .background(.gray.opacity(0.2))
                                .clipShape(RoundedRectangle(cornerRadius: 4))
                        }
                    }
                    Text("\(info.language)")
                        .font(.caption)
                        .foregroundStyle(.secondary)
                }

                Spacer()

                Button(action: onFavorite) {
                    Image(systemName: isFavorite ? "star.fill" : "star")
                        .foregroundStyle(isFavorite ? AnyShapeStyle(.tint) : AnyShapeStyle(.secondary))
                        .imageScale(.large)
                        .accessibilityLabel(isFavorite ? "Favorite" : "Make Favorite")
                }
                .buttonStyle(.plain)

                Button {
                    withAnimation { expanded.toggle() }
                } label: {
                    Image(systemName: expanded ? "chevron.up" : "chevron.down")
                        .foregroundStyle(.secondary)
                }
                .buttonStyle(.plain)
            }
            .contentShape(Rectangle())
            .onTapGesture { onTapRow() }
            .swipeActions(edge: .trailing, allowsFullSwipe: false) {
                if isHidden {
                    Button("Unhide") { onUnhide() }.tint(.blue)
                } else {
                    Button("Hide") { onHide() }.tint(.red)
                }
            }

            if expanded {
                VStack(spacing: 10) {
                    HStack {
                        Text("Speed").frame(width: 70, alignment: .leading)
                        Slider(
                            value: Binding(
                                get: { Double(profile.rate) },
                                set: { newVal in
                                    profile.rate = Float(newVal)
                                    onChange(profile, "at speed \(String(format: "%.2f", profile.rate))")
                                }
                            ),
                            in: 0...1, step: 0.01
                        )
                        Text(String(format: "%.2f", profile.rate))
                            .monospacedDigit()
                            .foregroundStyle(.secondary)
                            .frame(width: 52, alignment: .trailing)
                    }

                    HStack {
                        Text("Pitch").frame(width: 70, alignment: .leading)
                        Slider(
                            value: Binding(
                                get: { Double(profile.pitch) },
                                set: { newVal in
                                    profile.pitch = Float(newVal)
                                    onChange(profile, "at pitch \(String(format: "%.2f", profile.pitch))")
                                }
                            ),
                            in: 0.5...2.0, step: 0.01
                        )
                        Text(String(format: "%.2f", profile.pitch))
                            .monospacedDigit()
                            .foregroundStyle(.secondary)
                            .frame(width: 52, alignment: .trailing)
                    }

                    HStack {
                        Text("Volume").frame(width: 70, alignment: .leading)
                        Slider(
                            value: Binding(
                                get: { Double(profile.volume) },
                                set: { newVal in
                                    profile.volume = Float(newVal)
                                    onChange(profile, "at volume \(String(format: "%.2f", profile.volume))")
                                }
                            ),
                            in: 0...1, step: 0.01
                        )
                        Text(String(format: "%.2f", profile.volume))
                            .monospacedDigit()
                            .foregroundStyle(.secondary)
                            .frame(width: 52, alignment: .trailing)
                    }
                }
                .padding(.top, 4)
            }
        }
        .padding(.vertical, 6)
    }
}
