//
//  VoiceChorusPlayground.swift
//  VoiceKitUI
//
//  Generated by GPT-5 (OpenAI) â€” collaborator: robert
//  date: 09-17-2025
//

import SwiftUI
import VoiceKitCore
import AVFoundation

@MainActor
struct VoiceChorusPlayground: View {
    @State private var selectedProfiles: [TTSVoiceProfile] = []
    @State private var pitch: Float = 1.0
    @State private var rate: Float = 0.55
    @State private var customText: String = "God in his wisdom made the fly\nAnd then forgot to tell us why."

    // VoiceChorus.Engine == any TTSConfigurable & VoiceIO.
    // Some toolchains require an explicit local to help existential inference.
    let chorus = VoiceChorus(makeEngine: {
        let engine = RealVoiceIO()
        return engine as (any TTSConfigurable & VoiceIO)
    })

    var body: some View {
        VStack {
            // Fixed control area
            VStack {
                Text("Voice Chorus Playground")
                    .font(.largeTitle)

                Button(action: startChorus) {
                    Text("Play Chorus")
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color.blue)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                }
                .disabled(selectedProfiles.isEmpty)

                SliderView(title: "Pitch", value: $pitch, range: 0.5...2.0)
                SliderView(title: "Rate", value: $rate, range: 0.0...1.0)

                Section(header: Text("Custom Text")) {
                    TextEditor(text: $customText)
                        .frame(height: 100)
                        .border(Color.gray, width: 0.5)
                }
            }
            .padding()

            // Scrolling list area
            ScrollView {
                VoiceSelectionSection()
            }
        }
    }

    @ViewBuilder
    private func VoiceSelectionSection() -> some View {
        Section(header: Text("Voices")) {
            ForEach(availableVoices(), id: \.id) { voice in
                Toggle(voice.name, isOn: Binding(
                    get: { selectedProfiles.contains(where: { $0.id == voice.id }) },
                    set: { isSelected in
                        if isSelected {
                            selectedProfiles.append(
                                TTSVoiceProfile(
                                    id: voice.id,
                                    rate: Double(rate),  // public API uses Double
                                    pitch: pitch,
                                    volume: 1.0
                                )
                            )
                        } else {
                            selectedProfiles.removeAll { $0.id == voice.id }
                        }
                    }
                ))
            }
        }
    }

    private func startChorus() {
        Task {
            await chorus.sing(customText, withVoiceProfiles: selectedProfiles)
        }
    }

    // Use system voices (RealVoiceIO no longer exposes availableVoices()).
    func availableVoices() -> [TTSVoiceInfo] {
        AVSpeechSynthesisVoice.speechVoices()
            .map { TTSVoiceInfo(id: $0.identifier, name: $0.name, language: $0.language) }
            .sorted { $0.name.localizedCaseInsensitiveCompare($1.name) == .orderedAscending }
    }
}

struct SliderView: View {
    var title: String
    @Binding var value: Float
    var range: ClosedRange<Float>

    var body: some View {
        VStack {
            Text("\(title): \(value, specifier: "%.2f")")
            Slider(value: $value, in: range)
                .padding()
        }
    }
}

struct VoiceChorusPlayground_Previews: PreviewProvider {
    static var previews: some View {
        VoiceChorusPlayground()
    }
}

struct SliderView_Previews: PreviewProvider {
    static var previews: some View {
        SliderView(title: "Test Slider", value: .constant(1.0), range: 0.5...2.0)
            .previewLayout(.sizeThatFits)
    }
}
