//
//  NameResolver.swift
//  VoiceKit
//
//  Generated by GPT-5 (OpenAI) — collaborator: rdoggett
//  date: 09-13-2025
//
//  Strict name resolution with a “clean edges” return when no allowed list,
//  and exact match after robust normalization when allowed is provided.
//

import Foundation

public struct NameResolver: Sendable {

    public enum Policy: Sendable {
        case strictExact // exact match after normalization; no nicknames/aliases
    }

    public var policy: Policy = .strictExact

    public init(policy: Policy = .strictExact) {
        self.policy = policy
    }

    // Resolve a spoken name to an allowed list.
    // - Behavior:
    //   - If `allowed` is nil or empty: return the raw input with leading/trailing
    //     whitespace and punctuation trimmed (preserving original case/diacritics).
    //   - Else: normalize both transcript and allowed strings by folding case/diacritics,
    //     removing zero-width/soft hyphens, converting punctuation (including hyphen/dash
    //     variants) to spaces, and collapsing whitespace. Return the original allowed string
    //     when a normalized exact match is found; otherwise nil.
    // swiftlint:disable:next discouraged_optional_collection
    public func resolve(transcript raw: String, allowed: [String]?) -> String? {
        guard let allowed, !allowed.isEmpty else {
            return cleanEdgesPreservingCase(raw)
        }

        // Build normalized lookup → original allowed string
        var table: [String: String] = [:]
        for allowedName in allowed {
            table[normalizeForMatch(allowedName)] = allowedName
        }

        switch policy {
        case .strictExact:
            let key = normalizeForMatch(raw)
            return table[key]
        }
    }

    // MARK: - Helpers

    /// Trim whitespace and leading/trailing punctuation without changing case/diacritics.
    private func cleanEdgesPreservingCase(_ string: String) -> String {
        string.trimmingCharacters(in: .whitespacesAndNewlines)
            .trimmingCharacters(in: .punctuationCharacters) // (e.g., "Max!" -> "Max")
    }

    /// Normalize for strict matching:
    /// - Remove zero-width/soft hyphens.
    /// - Convert hyphen/dash variants and all punctuation to spaces.
    /// - Collapse whitespace to single spaces; trim.
    /// - Fold diacritics and case (lowercased result).
    private func normalizeForMatch(_ string: String) -> String {
        var result = string

        // Remove invisible/soft joiners that can sneak into transcripts
        result = result.replacingOccurrences(of: #"[\u00AD\u200B\u200C\u200D\u2060]"#,
                                             with: "",
                                             options: .regularExpression)

        // Turn hyphen/dash variants (and ASCII '-') into spaces to align "Jean‑Luc" with "Jean Luc"
        result = result.replacingOccurrences(of: #"[-\u2010\u2011\u2012\u2013\u2014\u2212]"#,
                                             with: " ",
                                             options: .regularExpression)

        // Replace all remaining punctuation with spaces (commas, periods, quotes, etc.)
        result = result.replacingOccurrences(of: #"[\p{P}]"#, with: " ", options: .regularExpression)

        // Collapse whitespace and trim
        result = result
            .replacingOccurrences(of: #"\s{2,}"#, with: " ", options: .regularExpression)
            .trimmingCharacters(in: .whitespacesAndNewlines)

        // Fold diacritics and case for matching
        result = result.folding(options: [.diacriticInsensitive, .caseInsensitive], locale: .autoupdatingCurrent)

        return result
    }
}
