//
//  SystemVoicesCache.swift
//  VoiceKit
//
//  A tiny, per-process cache for system TTS voices.
//  - Captures AVSpeechSynthesisVoice.speechVoices() once on first access.
//  - Exposes a refresh() to rebuild when the set of voices changes (rare).
//  - Does not alter any existing behavior until adopted.
//
//  Generated by GPT-5 (OpenAI) â€” collaborator: rdoggett
//  date: 09-20-2025
//

import Foundation
@preconcurrency import AVFoundation

/// Cached list of system voices mapped to TTSVoiceInfo.
/// Access via SystemVoicesCache.all().
@MainActor
public enum SystemVoicesCache {
    // Storage
    private static var cached: [TTSVoiceInfo] = []
    private static var lastRefresh: Date?

    /// Return cached voices. Builds the cache on first access.
    /// Stable, name-sorted order for predictable UI/tests.
    public static func all() -> [TTSVoiceInfo] {
        if cached.isEmpty { return refresh() }
        return cached
    }

    /// Rebuild the cache by querying AVSpeechSynthesisVoice.
    /// Returns the new cached list.
    @discardableResult
    public static func refresh() -> [TTSVoiceInfo] {
        // Query system voices and map to shared model.
        let list = AVSpeechSynthesisVoice.speechVoices()
            .map { TTSVoiceInfo(id: $0.identifier, name: $0.name, language: $0.language) }
            .sorted { $0.name.localizedCaseInsensitiveCompare($1.name) == .orderedAscending }

        cached = list
        lastRefresh = Date()
        return list
    }

    /// Last time the cache was built.
    public static func lastRefreshedAt() -> Date? { lastRefresh }

    /// Clear the cache (next all() will rebuild). Rarely needed.
    public static func clear() {
        cached = []
        lastRefresh = nil
    }
}
