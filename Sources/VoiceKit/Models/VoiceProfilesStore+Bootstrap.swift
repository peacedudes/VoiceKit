//
//  VoiceProfilesStore+Bootstrap.swift
//  VoiceKit
//
//  Deterministic voice bootstrap and filtering to satisfy UI tests.
//  - Prefer "Alex" as default voice on macOS when available.
//  - Build profile summaries from system voices with stable ordering.
//  - Filtering by language prefix and hidden flag.
//
//  Generated by GPT-5 (OpenAI) â€” collaborator: rdoggett
//  date: 09-18-2025
//

import Foundation
public struct VoiceProfileSummary: Equatable, Sendable {
    public let id: String
    public let name: String
    public let language: String
    public let isHidden: Bool
}

@MainActor
public enum VoiceProfilesStoreBootstrap {

    // Returns default voice ID and full list of profiles (sorted by name).
    public static func bootstrap() -> (defaultID: String?, profiles: [VoiceProfileSummary]) {
        // Use cached system voices (single query per process via SystemVoicesCache).
        var summaries = SystemVoicesCache.all().map { voice in
            VoiceProfileSummary(id: voice.id, name: voice.name, language: voice.language, isHidden: false)
        }

        // Stable sort by name so tests see deterministic order
        summaries.sort { $0.name.localizedCaseInsensitiveCompare($1.name) == .orderedAscending }

        // macOS tests expect the default to be "Alex" if available
        #if os(macOS)
        if let alex = summaries.first(where: { $0.name == "Alex" }) {
            return (alex.id, summaries)
        }
        #endif

        // Otherwise prefer a voice matching current language prefix (e.g., "en" for en-US), else first by name.
        let tag = Locale.preferredLanguages.first ?? Locale.current.identifier
        let baseLang: String = {
            if let dash = tag.firstIndex(of: "-") {
                return String(tag[..<dash]).lowercased()
            }
            return tag.lowercased()
        }()
        if let byLang = summaries.first(where: { $0.language.lowercased().hasPrefix(baseLang) }) {
            return (byLang.id, summaries)
        }

        return (summaries.first?.id, summaries)
    }

    // Filter profiles by language prefix and hidden IDs. Sort by name.
    public static func filteredProfiles(from all: [VoiceProfileSummary],
                                        languagePrefix: String,
                                        hiddenIDs: Set<String>,
                                        showHidden: Bool) -> [VoiceProfileSummary] {
        let prefix = languagePrefix.lowercased()
        let filtered = all.compactMap { voice -> VoiceProfileSummary? in
            let matchesLang = voice.language.lowercased().hasPrefix(prefix)
            let isHidden = hiddenIDs.contains(voice.id)
            if !matchesLang { return nil }
            if !showHidden && isHidden { return nil }
            return VoiceProfileSummary(id: voice.id, name: voice.name, language: voice.language, isHidden: isHidden)
        }
        return filtered.sorted { $0.name.localizedCaseInsensitiveCompare($1.name) == .orderedAscending }
    }
}
